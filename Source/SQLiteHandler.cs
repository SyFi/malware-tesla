using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

public class SQLiteHandler
{
    private byte[] db_bytes;
    private ulong encoding;
    private string[] field_names;
    private sqlite_master_entry[] master_table_entries;
    private ushort page_size;
    private byte[] SQLDataTypeSize = new byte[] { 0, 1, 2, 3, 4, 6, 8, 8, 0, 0 };
    private table_entry[] table_entries;

    public SQLiteHandler(string baseName)
    {
        if (File.Exists(baseName))
        {
            FileSystem.FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared, -1);
            string str = Strings.Space((int) FileSystem.LOF(1));
            FileSystem.FileGet(1, ref str, -1L, false);
            FileSystem.FileClose(new int[] { 1 });
            this.db_bytes = Encoding.Default.GetBytes(str);
            if (Encoding.Default.GetString(this.db_bytes, 0, 15).CompareTo("SQLite format 3") != 0)
            {
                throw new Exception("Not a valid SQLite 3 Database File");
            }
            if (this.db_bytes[0x34] != 0)
            {
                throw new Exception("Auto-vacuum capable database is not supported");
            }
            this.page_size = (ushort) this.ConvertToInteger(0x10, 2);
            this.encoding = this.ConvertToInteger(0x38, 4);
            if (decimal.Compare(new decimal(this.encoding), decimal.Zero) == 0)
            {
                this.encoding = 1L;
            }
            this.ReadMasterTable(100L);
        }
    }

    private ulong ConvertToInteger(int startIndex, int Size)
    {
        if ((Size > 8) | (Size == 0))
        {
            return 0L;
        }
        ulong num2 = 0L;
        int num4 = Size - 1;
        for (int i = 0; i <= num4; i++)
        {
            num2 = (num2 << 8) | this.db_bytes[startIndex + i];
        }
        return num2;
    }

    private long CVL(int startIndex, int endIndex)
    {
        endIndex++;
        byte[] buffer = new byte[8];
        object left = endIndex - startIndex;
        bool flag = false;
        if (Conversions.ToBoolean(Operators.OrObject(Operators.CompareObjectEqual(left, 0, false), Operators.CompareObjectGreater(left, 9, false))))
        {
            return 0L;
        }
        if (Operators.ConditionalCompareObjectEqual(left, 1, false))
        {
            buffer[0] = (byte) (this.db_bytes[startIndex] & 0x7f);
            return BitConverter.ToInt64(buffer, 0);
        }
        if (Operators.ConditionalCompareObjectEqual(left, 9, false))
        {
            flag = true;
        }
        int num2 = 1;
        int num3 = 7;
        int index = 0;
        if (flag)
        {
            buffer[0] = this.db_bytes[endIndex - 1];
            endIndex--;
            index = 1;
        }
        int num6 = startIndex;
        for (int i = endIndex - 1; i >= num6; i += -1)
        {
            if ((i - 1) >= startIndex)
            {
                buffer[index] = (byte) ((((byte) (this.db_bytes[i] >> ((num2 - 1) & 7))) & (((int) 0xff) >> num2)) | ((byte) (this.db_bytes[i - 1] << (num3 & 7))));
                num2++;
                index++;
                num3--;
            }
            else if (!flag)
            {
                buffer[index] = (byte) (((byte) (this.db_bytes[i] >> ((num2 - 1) & 7))) & (((int) 0xff) >> num2));
            }
        }
        return BitConverter.ToInt64(buffer, 0);
    }

    public int GetRowCount() => 
        this.table_entries.Length;

    public string[] GetTableNames()
    {
        string[] strArray2;
        object obj2 = 0;
        int num2 = this.master_table_entries.Length - 1;
        for (int i = 0; i <= num2; i++)
        {
            if (this.master_table_entries[i].item_type == "table")
            {
                strArray2 = (string[]) Utils.CopyArray((Array) strArray2, new string[Conversions.ToInteger(obj2) + 1]);
                strArray2[Conversions.ToInteger(obj2)] = this.master_table_entries[i].item_name;
                obj2 = Operators.AddObject(obj2, 1);
            }
        }
        return strArray2;
    }

    public string GetValue(int row_num, int field)
    {
        if (row_num >= this.table_entries.Length)
        {
            return null;
        }
        if (field >= this.table_entries[row_num].content.Length)
        {
            return null;
        }
        return this.table_entries[row_num].content[field];
    }

    public string GetValue(int row_num, string field)
    {
        int num = -1;
        int length = this.field_names.Length;
        for (int i = 0; i <= length; i++)
        {
            if (this.field_names[i].ToLower().CompareTo(field.ToLower()) == 0)
            {
                num = i;
                break;
            }
        }
        if (num == -1)
        {
            return null;
        }
        return this.GetValue(row_num, num);
    }

    private int GVL(int startIndex)
    {
        if (startIndex > this.db_bytes.Length)
        {
            return 0;
        }
        int num3 = startIndex + 8;
        for (int i = startIndex; i <= num3; i++)
        {
            if (i > (this.db_bytes.Length - 1))
            {
                return 0;
            }
            if ((this.db_bytes[i] & 0x80) != 0x80)
            {
                return i;
            }
        }
        return (startIndex + 8);
    }

    private bool IsOdd(long value) => 
        ((value & 1L) == 1L);

    private void ReadMasterTable(ulong Offset)
    {
        if (this.db_bytes[(int) Offset] == 13)
        {
            ushort num2 = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3M)), 2)), decimal.One));
            int length = 0;
            if (this.master_table_entries != null)
            {
                length = this.master_table_entries.Length;
                this.master_table_entries = (sqlite_master_entry[]) Utils.CopyArray((Array) this.master_table_entries, new sqlite_master_entry[(this.master_table_entries.Length + num2) + 1]);
            }
            else
            {
                this.master_table_entries = new sqlite_master_entry[num2 + 1];
            }
            int num11 = num2;
            for (int i = 0; i <= num11; i++)
            {
                ulong left = this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 8M), new decimal(i * 2))), 2);
                if (decimal.Compare(new decimal(Offset), 100M) != 0)
                {
                    left += Offset;
                }
                object obj3 = this.GVL((int) left);
                long num6 = this.CVL((int) left, Conversions.ToInteger(obj3));
                object objectValue = this.GVL(Conversions.ToInteger(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(obj3, left)), 1)));
                this.master_table_entries[length + i].row_id = this.CVL(Conversions.ToInteger(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(obj3, left)), 1)), Conversions.ToInteger(objectValue));
                left = Conversions.ToULong(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(objectValue, left)), 1));
                obj3 = this.GVL((int) left);
                objectValue = RuntimeHelpers.GetObjectValue(obj3);
                long num5 = this.CVL((int) left, Conversions.ToInteger(obj3));
                long[] numArray = new long[5];
                int index = 0;
                do
                {
                    obj3 = Operators.AddObject(objectValue, 1);
                    objectValue = this.GVL(Conversions.ToInteger(obj3));
                    numArray[index] = this.CVL(Conversions.ToInteger(obj3), Conversions.ToInteger(objectValue));
                    if (numArray[index] > 9L)
                    {
                        if (this.IsOdd(numArray[index]))
                        {
                            numArray[index] = (long) Math.Round((double) (((double) (numArray[index] - 13L)) / 2.0));
                        }
                        else
                        {
                            numArray[index] = (long) Math.Round((double) (((double) (numArray[index] - 12L)) / 2.0));
                        }
                    }
                    else
                    {
                        numArray[index] = this.SQLDataTypeSize[(int) numArray[index]];
                    }
                    index++;
                }
                while (index <= 4);
                if (decimal.Compare(new decimal(this.encoding), decimal.One) == 0)
                {
                    this.master_table_entries[length + i].item_type = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(left), new decimal(num5))), (int) numArray[0]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 2M) == 0)
                {
                    this.master_table_entries[length + i].item_type = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(left), new decimal(num5))), (int) numArray[0]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 3M) == 0)
                {
                    this.master_table_entries[length + i].item_type = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(left), new decimal(num5))), (int) numArray[0]);
                }
                if (decimal.Compare(new decimal(this.encoding), decimal.One) == 0)
                {
                    this.master_table_entries[length + i].item_name = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0]))), (int) numArray[1]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 2M) == 0)
                {
                    this.master_table_entries[length + i].item_name = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0]))), (int) numArray[1]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 3M) == 0)
                {
                    this.master_table_entries[length + i].item_name = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0]))), (int) numArray[1]);
                }
                this.master_table_entries[length + i].root_num = (long) this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0])), new decimal(numArray[1])), new decimal(numArray[2]))), (int) numArray[3]);
                if (decimal.Compare(new decimal(this.encoding), decimal.One) == 0)
                {
                    this.master_table_entries[length + i].sql_statement = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0])), new decimal(numArray[1])), new decimal(numArray[2])), new decimal(numArray[3]))), (int) numArray[4]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 2M) == 0)
                {
                    this.master_table_entries[length + i].sql_statement = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0])), new decimal(numArray[1])), new decimal(numArray[2])), new decimal(numArray[3]))), (int) numArray[4]);
                }
                else if (decimal.Compare(new decimal(this.encoding), 3M) == 0)
                {
                    this.master_table_entries[length + i].sql_statement = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(numArray[0])), new decimal(numArray[1])), new decimal(numArray[2])), new decimal(numArray[3]))), (int) numArray[4]);
                }
            }
        }
        else if (this.db_bytes[(int) Offset] == 5)
        {
            decimal num9 = decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3M)), 2)), decimal.One);
            int num12 = Convert.ToInt32(num9);
            for (int j = 0; j <= num12; j++)
            {
                ushort startIndex = (ushort) this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 12M), new decimal(j * 2))), 2);
                if (decimal.Compare(new decimal(Offset), 100M) == 0)
                {
                    this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger(startIndex, 4)), decimal.One), new decimal(this.page_size))));
                }
                else
                {
                    this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger((int) (Offset + startIndex), 4)), decimal.One), new decimal(this.page_size))));
                }
            }
            this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 8M)), 4)), decimal.One), new decimal(this.page_size))));
        }
    }

    public bool ReadTable(string TableName)
    {
        int index = -1;
        int length = this.master_table_entries.Length;
        for (int i = 0; i <= length; i++)
        {
            if (this.master_table_entries[i].item_name.ToLower().CompareTo(TableName.ToLower()) == 0)
            {
                index = i;
                break;
            }
        }
        if (index == -1)
        {
            return false;
        }
        object[] objArray = this.master_table_entries[index].sql_statement.Substring(this.master_table_entries[index].sql_statement.IndexOf("(") + 1).Split(new char[] { ',' });
        int num5 = objArray.Length - 1;
        for (int j = 0; j <= num5; j++)
        {
            objArray[j] = Strings.LTrim(Conversions.ToString(objArray[j]));
            object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objArray[j], null, "IndexOf", new object[] { " " }, null, null, null));
            if (Operators.ConditionalCompareObjectGreater(objectValue, 0, false))
            {
                object[] arguments = new object[] { 0, RuntimeHelpers.GetObjectValue(objectValue) };
                bool[] copyBack = new bool[] { false, true };
                if (copyBack[1])
                {
                    objectValue = RuntimeHelpers.GetObjectValue(arguments[1]);
                }
                objArray[j] = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objArray[j], null, "Substring", arguments, null, null, copyBack));
            }
            if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(objArray[j], null, "IndexOf", new object[] { "UNIQUE" }, null, null, null), 0, false))
            {
                break;
            }
            this.field_names = (string[]) Utils.CopyArray((Array) this.field_names, new string[j + 1]);
            this.field_names[j] = Conversions.ToString(objArray[j]);
        }
        return this.ReadTableFromOffset((ulong) ((this.master_table_entries[index].root_num - 1L) * this.page_size));
    }

    private bool ReadTableFromOffset(ulong Offset)
    {
        if (this.db_bytes[(int) Offset] == 13)
        {
            object right = decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3M)), 2)), decimal.One);
            int length = 0;
            if (this.table_entries != null)
            {
                length = this.table_entries.Length;
                this.table_entries = (table_entry[]) Utils.CopyArray((Array) this.table_entries, new table_entry[Conversions.ToInteger(Operators.AddObject(this.table_entries.Length, right)) + 1]);
            }
            else
            {
                this.table_entries = new table_entry[Conversions.ToInteger(right) + 1];
            }
            int num12 = Conversions.ToInteger(right);
            for (int i = 0; i <= num12; i++)
            {
                record_header_field[] _fieldArray;
                ulong left = this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 8M), new decimal(i * 2))), 2);
                if (decimal.Compare(new decimal(Offset), 100M) != 0)
                {
                    left += Offset;
                }
                object obj5 = this.GVL((int) left);
                long num6 = this.CVL((int) left, Conversions.ToInteger(obj5));
                object objectValue = this.GVL(Conversions.ToInteger(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(obj5, left)), 1)));
                this.table_entries[length + i].row_id = this.CVL(Conversions.ToInteger(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(obj5, left)), 1)), Conversions.ToInteger(objectValue));
                left = Conversions.ToULong(Operators.AddObject(Operators.AddObject(left, Operators.SubtractObject(objectValue, left)), 1));
                obj5 = this.GVL((int) left);
                objectValue = RuntimeHelpers.GetObjectValue(obj5);
                long num5 = this.CVL((int) left, Conversions.ToInteger(obj5));
                long num7 = Conversions.ToLong(Operators.AddObject(Operators.SubtractObject(left, obj5), 1));
                for (object obj3 = 0; num7 < num5; obj3 = Operators.AddObject(obj3, 1))
                {
                    _fieldArray = (record_header_field[]) Utils.CopyArray((Array) _fieldArray, new record_header_field[Conversions.ToInteger(obj3) + 1]);
                    obj5 = Operators.AddObject(objectValue, 1);
                    objectValue = this.GVL(Conversions.ToInteger(obj5));
                    _fieldArray[Conversions.ToInteger(obj3)].type = this.CVL(Conversions.ToInteger(obj5), Conversions.ToInteger(objectValue));
                    if (_fieldArray[Conversions.ToInteger(obj3)].type > 9L)
                    {
                        if (this.IsOdd(_fieldArray[Conversions.ToInteger(obj3)].type))
                        {
                            _fieldArray[Conversions.ToInteger(obj3)].size = (long) Math.Round((double) (((double) (_fieldArray[Conversions.ToInteger(obj3)].type - 13L)) / 2.0));
                        }
                        else
                        {
                            _fieldArray[Conversions.ToInteger(obj3)].size = (long) Math.Round((double) (((double) (_fieldArray[Conversions.ToInteger(obj3)].type - 12L)) / 2.0));
                        }
                    }
                    else
                    {
                        _fieldArray[Conversions.ToInteger(obj3)].size = this.SQLDataTypeSize[(int) _fieldArray[Conversions.ToInteger(obj3)].type];
                    }
                    num7 = Conversions.ToLong(Operators.AddObject(Operators.AddObject(num7, Operators.SubtractObject(objectValue, obj5)), 1));
                }
                this.table_entries[length + i].content = new string[(_fieldArray.Length - 1) + 1];
                int num3 = 0;
                int num13 = _fieldArray.Length - 1;
                for (int j = 0; j <= num13; j++)
                {
                    if (_fieldArray[j].type > 9L)
                    {
                        if (!this.IsOdd(_fieldArray[j].type))
                        {
                            if (decimal.Compare(new decimal(this.encoding), decimal.One) == 0)
                            {
                                this.table_entries[length + i].content[j] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(num3))), (int) _fieldArray[j].size);
                            }
                            else if (decimal.Compare(new decimal(this.encoding), 2M) == 0)
                            {
                                this.table_entries[length + i].content[j] = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(num3))), (int) _fieldArray[j].size);
                            }
                            else if (decimal.Compare(new decimal(this.encoding), 3M) == 0)
                            {
                                this.table_entries[length + i].content[j] = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(num3))), (int) _fieldArray[j].size);
                            }
                        }
                        else
                        {
                            this.table_entries[length + i].content[j] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(num3))), (int) _fieldArray[j].size);
                        }
                    }
                    else
                    {
                        this.table_entries[length + i].content[j] = Conversions.ToString(this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(left), new decimal(num5)), new decimal(num3))), (int) _fieldArray[j].size));
                    }
                    num3 += (int) _fieldArray[j].size;
                }
            }
        }
        else if (this.db_bytes[(int) Offset] == 5)
        {
            ushort num10 = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3M)), 2)), decimal.One));
            int num14 = num10;
            for (int k = 0; k <= num14; k++)
            {
                ushort num9 = (ushort) this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 12M), new decimal(k * 2))), 2);
                this.ReadTableFromOffset(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger((int) (Offset + num9), 4)), decimal.One), new decimal(this.page_size))));
            }
            this.ReadTableFromOffset(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 8M)), 4)), decimal.One), new decimal(this.page_size))));
        }
        return true;
    }

    [StructLayout(LayoutKind.Sequential)]
    private struct record_header_field
    {
        public long size;
        public long type;
    }

    [StructLayout(LayoutKind.Sequential)]
    private struct sqlite_master_entry
    {
        public long row_id;
        public string item_type;
        public string item_name;
        public string astable_name;
        public long root_num;
        public string sql_statement;
    }

    [StructLayout(LayoutKind.Sequential)]
    private struct table_entry
    {
        public long row_id;
        public string[] content;
    }
}

