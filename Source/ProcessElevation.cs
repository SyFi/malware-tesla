using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;

internal class ProcessElevation
{
    public static void EditProcDescriptor(IntPtr processHandle, RawSecurityDescriptor dal)
    {
        byte[] binaryForm = new byte[(dal.BinaryLength - 1) + 1];
        dal.GetBinaryForm(binaryForm, 0);
        if (!SetKernelObjectSecurity(processHandle, 4, binaryForm))
        {
            throw new Win32Exception();
        }
    }

    [DllImport("kernel32.dll")]
    public static extern IntPtr GetCurrentProcess();
    [DllImport("advapi32.dll", SetLastError=true)]
    private static extern bool GetKernelObjectSecurity(IntPtr Handle, int securityInformation, [Out] byte[] pSecurityDescriptor, uint nLength, ref uint lpnLengthNeeded);
    private static T InlineAssignHelper<T>(ref T app, T ret)
    {
        app = ret;
        return ret;
    }

    public static RawSecurityDescriptor ParseProcDescriptor(IntPtr processHandle)
    {
        uint num;
        byte[] pSecurityDescriptor = new byte[0];
        GetKernelObjectSecurity(processHandle, 4, pSecurityDescriptor, 0, ref num);
        if ((num < 0L) || (num > 0x7fffL))
        {
            throw new Win32Exception();
        }
        if (!GetKernelObjectSecurity(processHandle, 4, InlineAssignHelper<byte[]>(ref pSecurityDescriptor, new byte[((int) (num - 1L)) + 1]), num, ref num))
        {
            throw new Win32Exception();
        }
        return new RawSecurityDescriptor(pSecurityDescriptor, 0);
    }

    public static void Protect()
    {
        IntPtr currentProcess = GetCurrentProcess();
        RawSecurityDescriptor dal = ParseProcDescriptor(currentProcess);
        dal.DiscretionaryAcl.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 0xf0fff, new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null));
        EditProcDescriptor(currentProcess, dal);
    }

    [DllImport("advapi32.dll", SetLastError=true)]
    private static extern bool SetKernelObjectSecurity(IntPtr Handle, int securityInformation, [In] byte[] pSecurityDescriptor);

    [Flags]
    public enum ProcessAccessRights
    {
        DELETE = 0x10000,
        ITE_OWNER = 0x80000,
        PROCESS_ALL_ACCESS = 0xf0fff,
        PROCESS_CREATE_PROCESS = 0x80,
        PROCESS_CREATE_THREAD = 2,
        PROCESS_DUP_HANDLE = 0x40,
        PROCESS_QUERY_INFORMATION = 0x400,
        PROCESS_QUERY_LIMITED_INFORMATION = 0x1000,
        PROCESS_SET_INFORMATION = 0x200,
        PROCESS_SET_QUOTA = 0x100,
        PROCESS_SUSPEND_RESUME = 0x800,
        PROCESS_TERMINATE = 1,
        PROCESS_VM_OPERATION = 8,
        PROCESS_VM_READ = 0x10,
        PROCESS_VM_WRITE = 0x20,
        READ_CONTROL = 0x20000,
        STANDARD_RIGHTS_REQUIRED = 0xf0000,
        SYNCHRONIZE = 0x100,
        WRITE_DAC = 0x40000
    }
}

