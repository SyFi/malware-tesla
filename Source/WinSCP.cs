using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;

internal sealed class WinSCP
{
    private static int dec_next_char(List<string> list)
    {
        int num = int.Parse(list[0]);
        int num2 = int.Parse(list[1]);
        return (0xff ^ ((((num << 4) + num2) ^ 0xa3) & 0xff));
    }

    internal static string WinSCPDecrypt(string user, string pass, string host)
    {
        string str;
        try
        {
            if (((user == string.Empty) || (pass == string.Empty)) || (host == string.Empty))
            {
                return "";
            }
            string str3 = pass;
            List<string> list = new List<string>();
            string str6 = str3;
            int num7 = 0;
            int length = str6.Length;
            while (num7 < length)
            {
                list.Add(str6[num7].ToString());
                num7++;
            }
            List<string> list2 = new List<string>();
            int num9 = list.Count - 1;
            for (int i = 0; i <= num9; i++)
            {
                if (list[i] == "A")
                {
                    list2.Add("10");
                }
                if (list[i] == "B")
                {
                    list2.Add("11");
                }
                if (list[i] == "C")
                {
                    list2.Add("12");
                }
                if (list[i] == "D")
                {
                    list2.Add("13");
                }
                if (list[i] == "E")
                {
                    list2.Add("14");
                }
                if (list[i] == "F")
                {
                    list2.Add("15");
                }
                if ("ABCDEF".IndexOf(list[i]) == -1)
                {
                    list2.Add(list[i]);
                }
            }
            List<string> list3 = list2;
            int num = 0;
            if (dec_next_char(list3) == 0xff)
            {
                num = dec_next_char(list3);
            }
            list3.Remove(list3[0]);
            list3.Remove(list3[0]);
            list3.Remove(list3[0]);
            list3.Remove(list3[0]);
            num = dec_next_char(list3);
            List<string> list4 = list3;
            list4.Remove(list4[0]);
            list4.Remove(list4[0]);
            int num3 = dec_next_char(list3) * 2;
            int num10 = num3 - 1;
            for (int j = 0; j <= num10; j++)
            {
                list3.Remove(list3[0]);
            }
            string str2 = "";
            int num11 = num - 1;
            for (int k = -1; k <= num11; k++)
            {
                string str5 = Strings.ChrW(dec_next_char(list3)).ToString();
                list3.Remove(list3[0]);
                list3.Remove(list3[0]);
                str2 = str2 + str5;
            }
            string str4 = user + host;
            int index = str2.IndexOf(str4, StringComparison.Ordinal);
            str = str2.Remove(0, index).Replace(str4, "");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "";
            ProjectData.ClearProjectError();
        }
        return str;
    }
}

