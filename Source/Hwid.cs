using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Management;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

[StandardModule]
public sealed class Hwid
{
    private static object GetCPUID()
    {
        string str = string.Empty;
        ManagementObjectCollection instances = new ManagementClass("win32_processor").GetInstances();
        foreach (ManagementObject obj3 in instances)
        {
            str = obj3.Properties["processorID"].Value.ToString();
        }
        return str;
    }

    public static string GetID()
    {
        string str2 = "";
        try
        {
            str2 = GetMd5Hash(MD5.Create(), Conversions.ToString(Operators.ConcatenateObject(SystemSerialNumber(), GetCPUID())));
            if (str2.Contains(" "))
            {
                str2 = str2.Replace(" ", "");
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str2 = "None";
            ProjectData.ClearProjectError();
        }
        return str2;
    }

    public static string GetMd5Hash(MD5 md5Hash, string input)
    {
        byte[] buffer = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
        StringBuilder builder = new StringBuilder();
        int num2 = buffer.Length - 1;
        for (int i = 0; i <= num2; i++)
        {
            if ((((i % 2) == 0) & (i != (buffer.Length - 1))) & (i > 0))
            {
                builder.Append("-");
            }
            builder.Append(buffer[i].ToString("x2"));
        }
        return builder.ToString().ToUpper();
    }

    private static string SystemSerialNumber()
    {
        string str;
        try
        {
            IEnumerator enumerator;
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.GetObject("WinMgmts:", null));
            string left = string.Empty;
            object obj2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, null, "InstancesOf", new object[] { "Win32_BaseBoard" }, null, null, null));
            try
            {
                enumerator = ((IEnumerable) obj2).GetEnumerator();
                while (enumerator.MoveNext())
                {
                    object instance = RuntimeHelpers.GetObjectValue(enumerator.Current);
                    left = Conversions.ToString(Operators.ConcatenateObject(left, NewLateBinding.LateGet(instance, null, "SerialNumber", new object[0], null, null, null)));
                }
            }
            finally
            {
                if (enumerator is IDisposable)
                {
                    (enumerator as IDisposable).Dispose();
                }
            }
            str = left;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            str = string.Empty;
            ProjectData.ClearProjectError();
        }
        return str;
    }
}

